// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package issuer

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// RegistryExtendedABI is the input ABI used to generate the binding from.
const RegistryExtendedABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimIssuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimSubject\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"_topics\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"_claimData\",\"type\":\"bytes[]\"}],\"name\":\"ClaimBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_claimIssuer\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_claimSubject\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"_topics\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"_claimData\",\"type\":\"bytes[]\"}],\"name\":\"ClaimBatchMultiple\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimIssuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_claimSubject\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_claimData\",\"type\":\"bytes\"}],\"name\":\"ClaimSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"_topics\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"IssuanceBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"IssuanceSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"from\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"to\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatchMultiple\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_validityData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_topics\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"batchIssue\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"certificateStorage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"validityData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"claimedBalanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getCertificate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"topic\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"validityCall\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_validityData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_topic\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_claimData\",\"type\":\"bytes[]\"}],\"name\":\"safeBatchTransferAndClaimFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_claimData\",\"type\":\"bytes\"}],\"name\":\"safeTransferAndClaimFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_validityData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_topics\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"batchIssueMultiple\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"safeBatchTransferFromMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_from\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_claimData\",\"type\":\"bytes[]\"}],\"name\":\"safeBatchTransferAndClaimFromMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// RegistryExtendedBin is the compiled bytecode used for deploying new contracts.
var RegistryExtendedBin = "0x60806040523480156200001157600080fd5b506040516200587b3803806200587b833981016040819052620000349162000112565b80806200004a8164010000000062000053810204565b5050506200026e565b8051620000689060029060208401906200006c565b5050565b8280546200007a90620001e9565b90600052602060002090601f0160209004810192826200009e5760008555620000e9565b82601f10620000b957805160ff1916838001178555620000e9565b82800160010185558215620000e9579182015b82811115620000e9578251825591602001919060010190620000cc565b50620000f7929150620000fb565b5090565b5b80821115620000f75760008155600101620000fc565b6000602080838503121562000125578182fd5b825167ffffffffffffffff808211156200013d578384fd5b818501915085601f83011262000151578384fd5b8151818111156200016657620001666200023f565b604051601f8201601f19908116603f011681019083821181831017156200019157620001916200023f565b816040528281528886848701011115620001a9578687fd5b8693505b82841015620001cc5784840186015181850187015292850192620001ad565b82841115620001dd57868684830101525b98975050505050505050565b600281046001821680620001fe57607f821691505b6020821081141562000239577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6155fd806200027e6000396000f3fe608060405234801561001057600080fd5b506004361061013a5760003560e060020a900480638673605a116100bc578063ba688a9411610080578063ba688a94146102cd578063c48238b0146102e0578063c5308dd81461030b578063d6878ffb1461031e578063e985e9c514610341578063f242432a1461037d57600080fd5b80638673605a1461026e5780638838a9d7146102815780638ed8707514610294578063a22cb465146102a7578063b93bbaa0146102ba57600080fd5b80634e1273f4116101035780634e1273f4146101f257806351640fee14610212578063543d526d14610235578063760c6caf14610248578063836a10401461025b57600080fd5b8062fdd58e1461013f57806301ffc9a7146101655780630e89341c146101885780632eb2c2d6146101a85780633ebbaaa5146101bd575b600080fd5b61015261014d3660046147a6565b610390565b6040519081526020015b60405180910390f35b610178610173366004614b1e565b61043c565b604051901515815260200161015c565b61019b610196366004614b56565b6104d9565b60405161015c9190615076565b6101bb6101b6366004614463565b61056d565b005b6101526101cb3660046147a6565b6000908152600460209081526040808320600160a060020a03949094168352929052205490565b610205610200366004614a39565b610612565b60405161015c9190615005565b610225610220366004614b56565b610797565b60405161015c9493929190614eab565b610152610243366004614715565b61096f565b6101bb610256366004614380565b610ba2565b6101bb610269366004614ba8565b611131565b61020561027c36600461460d565b61138a565b61020561028f3660046147cf565b6117f5565b6102056102a23660046149d0565b611db4565b6101bb6102b53660046146df565b611f99565b6101bb6102c83660046147cf565b612087565b6101bb6102db366004614894565b612705565b6101526102ee366004614b86565b600460209081526000928352604080842090915290825290205481565b6101bb610319366004614509565b6130c1565b61033161032c366004614b56565b613410565b60405161015c9493929190615336565b61017861034f36600461434e565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101bb61038b3660046145aa565b613553565b6000600160a060020a0383166104165760405160e560020a62461bcd02815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600090815260208181526040808320600160a060020a03949094168352929052205490565b6000600160e060020a031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061049f5750600160e060020a031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b806104d357507f01ffc9a700000000000000000000000000000000000000000000000000000000600160e060020a03198316145b92915050565b6060600280546104e890615442565b80601f016020809104026020016040519081016040528092919081815260200182805461051490615442565b80156105615780601f1061053657610100808354040283529160200191610561565b820191906000526020600020905b81548152906001019060200180831161054457829003601f168201915b50505050509050919050565b600160a060020a0385163314806105895750610589853361034f565b6105fe5760405160e560020a62461bcd02815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000606482015260840161040d565b61060b85858585856135f1565b5050505050565b6060815183511461068e5760405160e560020a62461bcd02815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161040d565b6000835167ffffffffffffffff8111156106bb5760e060020a634e487b7102600052604160045260246000fd5b6040519080825280602002602001820160405280156106e4578160200160208202803683370190505b50905060005b845181101561078f576107518582815181106107195760e060020a634e487b7102600052603260045260246000fd5b60200260200101518583815181106107445760e060020a634e487b7102600052603260045260246000fd5b6020026020010151610390565b8282815181106107745760e060020a634e487b7102600052603260045260246000fd5b6020908102919091010152610788816154ad565b90506106ea565b509392505050565b6000806060806005548511156107f25760405160e560020a62461bcd02815260206004820152601160248201527f5f6964206f7574206f6620626f756e6473000000000000000000000000000000604482015260640161040d565b60008581526003602090815260408083208151608081018352815481526001820154600160a060020a031693810193909352600281018054919284019161083890615442565b80601f016020809104026020016040519081016040528092919081815260200182805461086490615442565b80156108b15780601f10610886576101008083540402835291602001916108b1565b820191906000526020600020905b81548152906001019060200180831161089457829003601f168201915b505050505081526020016003820180546108ca90615442565b80601f01602080910402602001604051908101604052809291908181526020018280546108f690615442565b80156109435780601f1061091857610100808354040283529160200191610943565b820191906000526020600020905b81548152906001019060200180831161092657829003601f168201915b505050919092525050506020810151815160408301516060909301519199909850919650945092505050565b6000600160a060020a03881661099a5760405160e560020a62461bcd02815260040161040d906152ff565b6109da3388888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506137b892505050565b6005600081546109e9906154ad565b91829055509050610a2988828660005b6040519080825280601f01601f191660200182016040528015610a23576020820181803683370190505b50613883565b6040518060800160405280868152602001610a413390565b600160a060020a0316815260200188888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f870181900481028201810190925285815291810191908690869081908401838280828437600092018290525093909452505083815260036020908152604091829020845181558482015160018201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909216919091179055918401518051929350610b24926002850192919091019061410e565b5060608201518051610b4091600384019160209091019061410e565b5090505084610b4c3390565b600160a060020a03167f19fdba3b3fa810260206510aa7278c70ea23c0d104195bed67bfb27a3d82fbfe8387604051610b8f929190918252602082015260400190565b60405180910390a3979650505050505050565b600160a060020a038916610bfb5760405160e560020a62461bcd02815260206004820152601c60248201527f5f746f2061646472657373206d757374206265206e6f6e2d7a65726f00000000604482015260640161040d565b600160a060020a038a16610c545760405160e560020a62461bcd02815260206004820152601e60248201527f5f66726f6d2061646472657373206d757374206265206e6f6e2d7a65726f0000604482015260640161040d565b868514610c765760405160e560020a62461bcd02815260040161040d9061520e565b848114610c985760405160e560020a62461bcd02815260040161040d906151d7565b600160a060020a038a16331480610cb45750610cb48a3361034f565b610cd35760405160e560020a62461bcd02815260040161040d906150e6565b86610d235760405160e560020a62461bcd02815260206004820152601960248201527f6e6f206365727469666963617465732073706563696669656400000000000000604482015260640161040d565b8660008167ffffffffffffffff811115610d505760e060020a634e487b7102600052604160045260246000fd5b604051908082528060200260200182016040528015610d79578160200160208202803683370190505b50905060005b82811015610f6f576000600360008d8d85818110610db05760e060020a634e487b7102600052603260045260246000fd5b602090810292909201358352508181019290925260409081016000208151608081018352815481526001820154600160a060020a0316938101939093526002810180549192840191610e0190615442565b80601f0160208091040260200160405190810160405280929190818152602001828054610e2d90615442565b8015610e7a5780601f10610e4f57610100808354040283529160200191610e7a565b820191906000526020600020905b815481529060010190602001808311610e5d57829003601f168201915b50505050508152602001600382018054610e9390615442565b80601f0160208091040260200160405190810160405280929190818152602001828054610ebf90615442565b8015610f0c5780601f10610ee157610100808354040283529160200191610f0c565b820191906000526020600020905b815481529060010190602001808311610eef57829003601f168201915b5050505050815250509050610f29816020015182604001516137b8565b8060000151838381518110610f515760e060020a634e487b7102600052603260045260246000fd5b60209081029190910101525080610f67816154ad565b915050610d7f565b508a600160a060020a03168c600160a060020a03161461103d5761103d8c8c8c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8f018190048102820181019092528d815292508d91508c908190840183828082843760009201919091525061056d92505050565b60005b828110156110b7576110a58c8c8c8481811061106f5760e060020a634e487b7102600052603260045260246000fd5b905060200201358b8b858181106110995760e060020a634e487b7102600052603260045260246000fd5b90506020020135613956565b806110af816154ad565b915050611040565b50806040516110c69190614db8565b60405180910390208b600160a060020a03168d600160a060020a03167f61a69d58bffe77be60879031f7e6d3d17fab9c88a681899a549d20ae8a39f8d08d8d8d8d8b8b60405161111b96959493929190614fbc565b60405180910390a4505050505050505050505050565b600160a060020a03821661115a5760405160e560020a62461bcd02815260040161040d906152ff565b600081116111ad5760405160e560020a62461bcd02815260206004820152601a60248201527f5f7175616e74697479206d7573742062652061626f766520302e000000000000604482015260640161040d565b60008381526003602090815260408083208151608081018352815481526001820154600160a060020a03169381019390935260028101805491928401916111f390615442565b80601f016020809104026020016040519081016040528092919081815260200182805461121f90615442565b801561126c5780601f106112415761010080835404028352916020019161126c565b820191906000526020600020905b81548152906001019060200180831161124f57829003601f168201915b5050505050815260200160038201805461128590615442565b80601f01602080910402602001604051908101604052809291908181526020018280546112b190615442565b80156112fe5780601f106112d3576101008083540402835291602001916112fe565b820191906000526020600020905b8154815290600101906020018083116112e157829003601f168201915b50505050508152505090508060200151600160a060020a031661131e3390565b600160a060020a0316146113775760405160e560020a62461bcd02815260206004820152601360248201527f4e6f74206f726967696e616c2069737375657200000000000000000000000000604482015260640161040d565b61138483858460006109f9565b50505050565b6060600160a060020a038a166113b55760405160e560020a62461bcd02815260040161040d906152ff565b8184146113d75760405160e560020a62461bcd02815260040161040d9061520e565b8388146113f95760405160e560020a62461bcd02815260040161040d9061520e565b8367ffffffffffffffff8111156114235760e060020a634e487b7102600052604160045260246000fd5b60405190808252806020026020018201604052801561144c578160200160208202803683370190505b5090503360005b8581116115265760055461146790826153e7565b6114729060016153e7565b8382815181106114955760e060020a634e487b7102600052603260045260246000fd5b602002602001018181525050611514828c8c848181106114c85760e060020a634e487b7102600052603260045260246000fd5b90506020028101906114da919061537e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506137b892505050565b8061151e816154ad565b915050611453565b506115958b8388888080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509250611565915050565b6040519080825280601f01601f19166020018201604052801561158f576020820181803683370190505b506139bb565b60005b82518110156117895760405180608001604052808a8a848181106115cf5760e060020a634e487b7102600052603260045260246000fd5b90506020020135815260200183600160a060020a031681526020018c8c8481811061160d5760e060020a634e487b7102600052603260045260246000fd5b905060200281019061161f919061537e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060200186868481811061167c5760e060020a634e487b7102600052603260045260246000fd5b905060200281019061168e919061537e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250508551600392508690859081106116ed5760e060020a634e487b7102600052603260045260246000fd5b602002602001015181526020019081526020016000206000820151816000015560208201518160010160006101000a815481600160a060020a030219169083600160a060020a03160217905550604082015181600201908051906020019061175692919061410e565b506060820151805161177291600384019160209091019061410e565b509050508080611781906154ad565b915050611598565b50878760405161179a929190614d75565b604051809103902081600160a060020a03167f4337762bcc37db59d5eea698d442c9782e625db731704f4f83ed376a09b64e6c8489896040516117df93929190615018565b60405180910390a3509998505050505050505050565b6060836118475760405160e560020a62461bcd02815260206004820152601360248201527f6e6f2076616c7565732073706563696669656400000000000000000000000000604482015260640161040d565b8982146118695760405160e560020a62461bcd02815260040161040d9061520e565b81841461188b5760405160e560020a62461bcd02815260040161040d9061520e565b8388146118ad5760405160e560020a62461bcd02815260040161040d9061520e565b8786146118cf5760405160e560020a62461bcd02815260040161040d9061520e565b8367ffffffffffffffff8111156118f95760e060020a634e487b7102600052604160045260246000fd5b604051908082528060200260200182016040528015611922578160200160208202803683370190505b5090503360005b85811015611a155760008d8d838181106119565760e060020a634e487b7102600052603260045260246000fd5b905060200201602081019061196b919061432d565b600160a060020a031614156119955760405160e560020a62461bcd02815260040161040d906152ff565b6005546119a290826153e7565b6119ad9060016153e7565b8382815181106119d05760e060020a634e487b7102600052603260045260246000fd5b602002602001018181525050611a03828c8c848181106114c85760e060020a634e487b7102600052603260045260246000fd5b80611a0d816154ad565b915050611929565b5060005b8251811015611d0957611b218d8d83818110611a485760e060020a634e487b7102600052603260045260246000fd5b9050602002016020810190611a5d919061432d565b848381518110611a805760e060020a634e487b7102600052603260045260246000fd5b6020026020010151898985818110611aab5760e060020a634e487b7102600052603260045260246000fd5b90506020020135888886818110611ad55760e060020a634e487b7102600052603260045260246000fd5b9050602002810190611ae7919061537e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061388392505050565b60405180608001604052808a8a84818110611b4f5760e060020a634e487b7102600052603260045260246000fd5b90506020020135815260200183600160a060020a031681526020018c8c84818110611b8d5760e060020a634e487b7102600052603260045260246000fd5b9050602002810190611b9f919061537e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001868684818110611bfc5760e060020a634e487b7102600052603260045260246000fd5b9050602002810190611c0e919061537e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050855160039250869085908110611c6d5760e060020a634e487b7102600052603260045260246000fd5b602002602001015181526020019081526020016000206000820151816000015560208201518160010160006101000a815481600160a060020a030219169083600160a060020a031602179055506040820151816002019080519060200190611cd692919061410e565b5060608201518051611cf291600384019160209091019061410e565b509050508080611d01906154ad565b915050611a19565b508160018351611d1991906153ff565b81518110611d3a5760e060020a634e487b7102600052603260045260246000fd5b60200260200101516005819055508787604051611d58929190614d75565b604051809103902081600160a060020a03167f4337762bcc37db59d5eea698d442c9782e625db731704f4f83ed376a09b64e6c848989604051611d9d93929190615018565b60405180910390a3509a9950505050505050505050565b6060838214611e085760405160e560020a62461bcd02815260206004820152601e60248201527f6f776e65727320616e6420696473206c656e677468206d69736d617463680000604482015260640161040d565b60008467ffffffffffffffff811115611e345760e060020a634e487b7102600052604160045260246000fd5b604051908082528060200260200182016040528015611e5d578160200160208202803683370190505b50905060005b85811015611f8f5730633ebbaaa5888884818110611e945760e060020a634e487b7102600052603260045260246000fd5b9050602002016020810190611ea9919061432d565b878785818110611ecc5760e060020a634e487b7102600052603260045260246000fd5b60405160e060020a63ffffffff8716028152600160a060020a039094166004850152602002919091013560248301525060440160206040518083038186803b158015611f1757600080fd5b505afa158015611f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4f9190614b6e565b828281518110611f725760e060020a634e487b7102600052603260045260246000fd5b602090810291909101015280611f87816154ad565b915050611e63565b5095945050505050565b33600160a060020a038316141561201b5760405160e560020a62461bcd02815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161040d565b336000818152600160209081526040808320600160a060020a03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b8887146120a95760405160e560020a62461bcd02815260040161040d9061520e565b8685146120cb5760405160e560020a62461bcd02815260040161040d9061520e565b8483146120ed5760405160e560020a62461bcd02815260040161040d9061520e565b82811461210f5760405160e560020a62461bcd02815260040161040d906151d7565b60005b858110156125555760008b8b8381811061213f5760e060020a634e487b7102600052603260045260246000fd5b9050602002016020810190612154919061432d565b600160a060020a031614156121ae5760405160e560020a62461bcd02815260206004820152601760248201527f5f66726f6d206d757374206265206e6f6e2d7a65726f2e000000000000000000604482015260640161040d565b60008989838181106121d35760e060020a634e487b7102600052603260045260246000fd5b90506020020160208101906121e8919061432d565b600160a060020a031614156122125760405160e560020a62461bcd02815260040161040d906152ff565b338b8b838181106122365760e060020a634e487b7102600052603260045260246000fd5b905060200201602081019061224b919061432d565b600160a060020a0316148061229c575061229c8b8b838181106122815760e060020a634e487b7102600052603260045260246000fd5b9050602002016020810190612296919061432d565b3361034f565b6122bb5760405160e560020a62461bcd02815260040161040d906150e6565b8484828181106122de5760e060020a634e487b7102600052603260045260246000fd5b9050602002013561234f8c8c8481811061230b5760e060020a634e487b7102600052603260045260246000fd5b9050602002016020810190612320919061432d565b8989858181106123435760e060020a634e487b7102600052603260045260246000fd5b90506020020135610390565b10156123a05760405160e560020a62461bcd02815260206004820152601e60248201527f4e6f7420656e6f7567682062616c616e636520746f207472616e736665720000604482015260640161040d565b6000600360008989858181106123c95760e060020a634e487b7102600052603260045260246000fd5b602090810292909201358352508181019290925260409081016000208151608081018352815481526001820154600160a060020a031693810193909352600281018054919284019161241a90615442565b80601f016020809104026020016040519081016040528092919081815260200182805461244690615442565b80156124935780601f1061246857610100808354040283529160200191612493565b820191906000526020600020905b81548152906001019060200180831161247657829003601f168201915b505050505081526020016003820180546124ac90615442565b80601f01602080910402602001604051908101604052809291908181526020018280546124d890615442565b80156125255780601f106124fa57610100808354040283529160200191612525565b820191906000526020600020905b81548152906001019060200180831161250857829003601f168201915b5050505050815250509050612542816020015182604001516137b8565b508061254d816154ad565b915050612112565b503360005b868110156126a8576126988c8c838181106125885760e060020a634e487b7102600052603260045260246000fd5b905060200201602081019061259d919061432d565b8b8b848181106125c05760e060020a634e487b7102600052603260045260246000fd5b90506020020160208101906125d5919061432d565b8a8a858181106125f85760e060020a634e487b7102600052603260045260246000fd5b905060200201358989868181106126225760e060020a634e487b7102600052603260045260246000fd5b9050602002013588888781811061264c5760e060020a634e487b7102600052603260045260246000fd5b905060200281019061265e919061537e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613b2e92505050565b6126a1816154ad565b905061255a565b5080600160a060020a03167f9a17c5980bc0d14e313aaa844f04cd0ee291f743df00bf06337a3ce1db563be48c8c8c8c8c8c8c8c6040516126f0989796959493929190614ee5565b60405180910390a25050505050505050505050565b866127555760405160e560020a62461bcd02815260206004820152601960248201527f6e6f206365727469666963617465732073706563696669656400000000000000604482015260640161040d565b8a89146127775760405160e560020a62461bcd02815260040161040d9061520e565b8887146127995760405160e560020a62461bcd02815260040161040d9061520e565b8685146127bb5760405160e560020a62461bcd02815260040161040d9061520e565b8483146127dd5760405160e560020a62461bcd02815260040161040d906151d7565b8281146127ff5760405160e560020a62461bcd02815260040161040d906151d7565b60008767ffffffffffffffff81111561282b5760e060020a634e487b7102600052604160045260246000fd5b604051908082528060200260200182016040528015612854578160200160208202803683370190505b50905060005b88811015612c765760008e8e838181106128875760e060020a634e487b7102600052603260045260246000fd5b905060200201602081019061289c919061432d565b600160a060020a031614156128f65760405160e560020a62461bcd02815260206004820152601760248201527f5f66726f6d206d757374206265206e6f6e2d7a65726f2e000000000000000000604482015260640161040d565b60008c8c8381811061291b5760e060020a634e487b7102600052603260045260246000fd5b9050602002016020810190612930919061432d565b600160a060020a0316141561295a5760405160e560020a62461bcd02815260040161040d906152ff565b338e8e8381811061297e5760e060020a634e487b7102600052603260045260246000fd5b9050602002016020810190612993919061432d565b600160a060020a031614806129c957506129c98e8e838181106122815760e060020a634e487b7102600052603260045260246000fd5b6129e85760405160e560020a62461bcd02815260040161040d906150e6565b878782818110612a0b5760e060020a634e487b7102600052603260045260246000fd5b90506020020135612a708f8f84818110612a385760e060020a634e487b7102600052603260045260246000fd5b9050602002016020810190612a4d919061432d565b8c8c858181106123435760e060020a634e487b7102600052603260045260246000fd5b1015612ac15760405160e560020a62461bcd02815260206004820152601b60248201527f4e6f7420656e6f7567682062616c616e636520746f20636c61696d0000000000604482015260640161040d565b6000600360008c8c85818110612aea5760e060020a634e487b7102600052603260045260246000fd5b602090810292909201358352508181019290925260409081016000208151608081018352815481526001820154600160a060020a0316938101939093526002810180549192840191612b3b90615442565b80601f0160208091040260200160405190810160405280929190818152602001828054612b6790615442565b8015612bb45780601f10612b8957610100808354040283529160200191612bb4565b820191906000526020600020905b815481529060010190602001808311612b9757829003601f168201915b50505050508152602001600382018054612bcd90615442565b80601f0160208091040260200160405190810160405280929190818152602001828054612bf990615442565b8015612c465780601f10612c1b57610100808354040283529160200191612c46565b820191906000526020600020905b815481529060010190602001808311612c2957829003601f168201915b5050505050815250509050612c63816020015182604001516137b8565b5080612c6e816154ad565b91505061285a565b5060005b88811015613052576000600360008c8c85818110612cab5760e060020a634e487b7102600052603260045260246000fd5b602090810292909201358352508181019290925260409081016000208151608081018352815481526001820154600160a060020a0316938101939093526002810180549192840191612cfc90615442565b80601f0160208091040260200160405190810160405280929190818152602001828054612d2890615442565b8015612d755780601f10612d4a57610100808354040283529160200191612d75565b820191906000526020600020905b815481529060010190602001808311612d5857829003601f168201915b50505050508152602001600382018054612d8e90615442565b80601f0160208091040260200160405190810160405280929190818152602001828054612dba90615442565b8015612e075780601f10612ddc57610100808354040283529160200191612e07565b820191906000526020600020905b815481529060010190602001808311612dea57829003601f168201915b50505050508152505090508060000151838381518110612e3a5760e060020a634e487b7102600052603260045260246000fd5b6020026020010181815250508c8c83818110612e695760e060020a634e487b7102600052603260045260246000fd5b9050602002016020810190612e7e919061432d565b600160a060020a03168f8f84818110612eaa5760e060020a634e487b7102600052603260045260246000fd5b9050602002016020810190612ebf919061432d565b600160a060020a031614612fb757612fb78f8f84818110612ef35760e060020a634e487b7102600052603260045260246000fd5b9050602002016020810190612f08919061432d565b8e8e85818110612f2b5760e060020a634e487b7102600052603260045260246000fd5b9050602002016020810190612f40919061432d565b8d8d86818110612f635760e060020a634e487b7102600052603260045260246000fd5b905060200201358c8c87818110612f8d5760e060020a634e487b7102600052603260045260246000fd5b905060200201358b8b8881811061264c5760e060020a634e487b7102600052603260045260246000fd5b61303f8d8d84818110612fdd5760e060020a634e487b7102600052603260045260246000fd5b9050602002016020810190612ff2919061432d565b8c8c858181106130155760e060020a634e487b7102600052603260045260246000fd5b905060200201358b8b868181106110995760e060020a634e487b7102600052603260045260246000fd5b508061304a816154ad565b915050612c7a565b50806040516130619190614db8565b60405180910390207f5fb4aec6c096dfcae3899570b7e14f9743bb4b1801780db6d8a9c4ffe21aaaac8e8e8e8e8e8e8e8e8c8c6040516130aa9a99989796959493929190614f45565b60405180910390a250505050505050505050505050565b60008681526003602090815260408083208151608081018352815481526001820154600160a060020a031693810193909352600281018054919284019161310790615442565b80601f016020809104026020016040519081016040528092919081815260200182805461313390615442565b80156131805780601f1061315557610100808354040283529160200191613180565b820191906000526020600020905b81548152906001019060200180831161316357829003601f168201915b5050505050815260200160038201805461319990615442565b80601f01602080910402602001604051908101604052809291908181526020018280546131c590615442565b80156132125780601f106131e757610100808354040283529160200191613212565b820191906000526020600020905b8154815290600101906020018083116131f557829003601f168201915b505050505081525050905061322f816020015182604001516137b8565b600160a060020a0388166132585760405160e560020a62461bcd02815260040161040d906152ff565b600160a060020a0389166132b15760405160e560020a62461bcd02815260206004820152601f60248201527f5f66726f6d2061646472657373206d757374206265206e6f6e2d7a65726f2e00604482015260640161040d565b600160a060020a0389163314806132cd57506132cd893361034f565b6132ec5760405160e560020a62461bcd02815260040161040d906150e6565b856132f78a89610390565b10156133485760405160e560020a62461bcd02815260206004820152601e60248201527f5f66726f6d2062616c616e6365206c657373207468616e205f76616c75650000604482015260640161040d565b87600160a060020a031689600160a060020a0316146133a4576133a48989898989898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061355392505050565b6133af888888613956565b806000015188600160a060020a03168a600160a060020a03167fde6a12665e566ee081354e23cd8474944fb8e89a25b46f2f9b50d378e7e536088a8a88886040516133fd949392919061535e565b60405180910390a4505050505050505050565b6003602052600090815260409020805460018201546002830180549293600160a060020a039092169261344290615442565b80601f016020809104026020016040519081016040528092919081815260200182805461346e90615442565b80156134bb5780601f10613490576101008083540402835291602001916134bb565b820191906000526020600020905b81548152906001019060200180831161349e57829003601f168201915b5050505050908060030180546134d090615442565b80601f01602080910402602001604051908101604052809291908181526020018280546134fc90615442565b80156135495780601f1061351e57610100808354040283529160200191613549565b820191906000526020600020905b81548152906001019060200180831161352c57829003601f168201915b5050505050905084565b600160a060020a03851633148061356f575061356f853361034f565b6135e45760405160e560020a62461bcd02815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f7665640000000000000000000000000000000000000000000000606482015260840161040d565b61060b8585858585613b2e565b81518351146136155760405160e560020a62461bcd02815260040161040d90615245565b600160a060020a03841661363e5760405160e560020a62461bcd02815260040161040d9061511d565b3360005b845181101561374a5760008582815181106136705760e060020a634e487b7102600052603260045260246000fd5b60200260200101519050600085838151811061369f5760e060020a634e487b7102600052603260045260246000fd5b60209081029190910181015160008481528083526040808220600160a060020a038e1683529093529190912054909150818110156136f25760405160e560020a62461bcd02815260040161040d9061517a565b600083815260208181526040808320600160a060020a038e8116855292528083208585039055908b1682528120805484929061372f9084906153e7565b9250508190555050505080613743906154ad565b9050613642565b5084600160a060020a031686600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161379a929190615048565b60405180910390a46137b0818787878787613c51565b505050505050565b60008083600160a060020a0316836040516137d39190614dee565b600060405180830381855afa9150503d806000811461380e576040519150601f19603f3d011682016040523d82523d6000602084013e613813565b606091505b50915091508180156138345750808060200190518101906138349190614b02565b6113845760405160e560020a62461bcd02815260206004820152601b60248201527f526571756573742f636572746966696361746520696e76616c69640000000000604482015260640161040d565b600160a060020a0384166138ac5760405160e560020a62461bcd02815260040161040d906152a2565b336138c6816000876138bd88613e00565b61060b88613e00565b600084815260208181526040808320600160a060020a0389168452909152812080548592906138f69084906153e7565b90915550506040805185815260208101859052600160a060020a0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461060b81600087878787613e5c565b613961838383613f5b565b6000828152600460209081526040808320600160a060020a038716845290915290205461398f9082906153e7565b6000928352600460209081526040808520600160a060020a039096168552949052929091209190915550565b600160a060020a0384166139e45760405160e560020a62461bcd02815260040161040d906152a2565b8151835114613a085760405160e560020a62461bcd02815260040161040d90615245565b3360005b8451811015613ac657838181518110613a385760e060020a634e487b7102600052603260045260246000fd5b6020026020010151600080878481518110613a665760e060020a634e487b7102600052603260045260246000fd5b60200260200101518152602001908152602001600020600088600160a060020a0316600160a060020a031681526020019081526020016000206000828254613aae91906153e7565b90915550819050613abe816154ad565b915050613a0c565b5084600160a060020a03166000600160a060020a031682600160a060020a03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051613b17929190615048565b60405180910390a461060b81600087878787613c51565b600160a060020a038416613b575760405160e560020a62461bcd02815260040161040d9061511d565b33613b678187876138bd88613e00565b600084815260208181526040808320600160a060020a038a16845290915290205483811015613bab5760405160e560020a62461bcd02815260040161040d9061517a565b600085815260208181526040808320600160a060020a038b8116855292528083208785039055908816825281208054869290613be89084906153e7565b90915550506040805186815260208101869052600160a060020a03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4613c48828888888888613e5c565b50505050505050565b600160a060020a0384163b156137b0576040517fbc197c81000000000000000000000000000000000000000000000000000000008152600160a060020a0385169063bc197c8190613cae9089908990889088908890600401614e0a565b602060405180830381600087803b158015613cc857600080fd5b505af1925050508015613cf8575060408051601f3d908101601f19168201909252613cf591810190614b3a565b60015b613db457613d046154fa565b806308c379a01415613d415750613d19615516565b80613d245750613d43565b8060405160e560020a62461bcd02815260040161040d9190615076565b505b60405160e560020a62461bcd02815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161040d565b600160e060020a031981167fbc197c810000000000000000000000000000000000000000000000000000000014613c485760405160e560020a62461bcd02815260040161040d90615089565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110613e4b5760e060020a634e487b7102600052603260045260246000fd5b602090810291909101015292915050565b600160a060020a0384163b156137b0576040517ff23a6e61000000000000000000000000000000000000000000000000000000008152600160a060020a0385169063f23a6e6190613eb99089908990889088908890600401614e68565b602060405180830381600087803b158015613ed357600080fd5b505af1925050508015613f03575060408051601f3d908101601f19168201909252613f0091810190614b3a565b60015b613f0f57613d046154fa565b600160e060020a031981167ff23a6e610000000000000000000000000000000000000000000000000000000014613c485760405160e560020a62461bcd02815260040161040d90615089565b600160a060020a038316613fda5760405160e560020a62461bcd02815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161040d565b3361400a81856000613feb87613e00565b613ff487613e00565b5050604080516020810190915260009052505050565b600083815260208181526040808320600160a060020a0388168452909152902054828110156140a35760405160e560020a62461bcd028152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e636500000000000000000000000000000000000000000000000000000000606482015260840161040d565b600084815260208181526040808320600160a060020a03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b82805461411a90615442565b90600052602060002090601f01602090048101928261413c5760008555614182565b82601f1061415557805160ff1916838001178555614182565b82800160010185558215614182579182015b82811115614182578251825591602001919060010190614167565b5061418e929150614192565b5090565b5b8082111561418e5760008155600101614193565b8035600160a060020a03811681146141be57600080fd5b919050565b60008083601f8401126141d4578182fd5b50813567ffffffffffffffff8111156141eb578182fd5b602083019150836020808302850101111561420557600080fd5b9250929050565b600082601f83011261421c578081fd5b81356020614229826153c3565b6040516142368282615480565b838152828101915085830183850287018401881015614253578586fd5b855b8581101561427157813584529284019290840190600101614255565b5090979650505050505050565b60008083601f84011261428f578182fd5b50813567ffffffffffffffff8111156142a6578182fd5b60208301915083602082850101111561420557600080fd5b600082601f8301126142ce578081fd5b813567ffffffffffffffff8111156142e8576142e86154e1565b6040516142ff601f8301601f191660200182615480565b818152846020838601011115614313578283fd5b816020850160208301379081016020019190915292915050565b60006020828403121561433e578081fd5b614347826141a7565b9392505050565b60008060408385031215614360578081fd5b614369836141a7565b9150614377602084016141a7565b90509250929050565b60008060008060008060008060008060c08b8d03121561439e578586fd5b6143a78b6141a7565b99506143b560208c016141a7565b985060408b013567ffffffffffffffff808211156143d1578788fd5b6143dd8e838f016141c3565b909a50985060608d01359150808211156143f5578788fd5b6144018e838f016141c3565b909850965060808d0135915080821115614419578586fd5b6144258e838f0161427e565b909650945060a08d013591508082111561443d578384fd5b5061444a8d828e016141c3565b915080935050809150509295989b9194979a5092959850565b600080600080600060a0868803121561447a578081fd5b614483866141a7565b9450614491602087016141a7565b9350604086013567ffffffffffffffff808211156144ad578283fd5b6144b989838a0161420c565b945060608801359150808211156144ce578283fd5b6144da89838a0161420c565b935060808801359150808211156144ef578283fd5b506144fc888289016142be565b9150509295509295909350565b60008060008060008060008060c0898b031215614524578384fd5b61452d896141a7565b975061453b60208a016141a7565b96506040890135955060608901359450608089013567ffffffffffffffff80821115614565578586fd5b6145718c838d0161427e565b909650945060a08b0135915080821115614589578384fd5b506145968b828c0161427e565b999c989b5096995094979396929594505050565b600080600080600060a086880312156145c1578283fd5b6145ca866141a7565b94506145d8602087016141a7565b93506040860135925060608601359150608086013567ffffffffffffffff811115614601578182fd5b6144fc888289016142be565b600080600080600080600080600060a08a8c03121561462a578283fd5b6146338a6141a7565b985060208a013567ffffffffffffffff8082111561464f578485fd5b61465b8d838e016141c3565b909a50985060408c0135915080821115614673578485fd5b61467f8d838e016141c3565b909850965060608c0135915080821115614697578485fd5b6146a38d838e016141c3565b909650945060808c01359150808211156146bb578384fd5b506146c88c828d016141c3565b915080935050809150509295985092959850929598565b600080604083850312156146f1578182fd5b6146fa836141a7565b9150602083013561470a816155a0565b809150509250929050565b600080600080600080600060a0888a03121561472f578081fd5b614738886141a7565b9650602088013567ffffffffffffffff80821115614754578283fd5b6147608b838c0161427e565b909850965060408a0135955060608a0135945060808a0135915080821115614786578283fd5b506147938a828b0161427e565b989b979a50959850939692959293505050565b600080604083850312156147b8578182fd5b6147c1836141a7565b946020939093013593505050565b60008060008060008060008060008060a08b8d0312156147ed578384fd5b8a3567ffffffffffffffff80821115614804578586fd5b6148108e838f016141c3565b909c509a5060208d0135915080821115614828578586fd5b6148348e838f016141c3565b909a50985060408d013591508082111561484c578586fd5b6148588e838f016141c3565b909850965060608d0135915080821115614870578586fd5b61487c8e838f016141c3565b909650945060808d013591508082111561443d578384fd5b60008060008060008060008060008060008060c08d8f0312156148b5578586fd5b67ffffffffffffffff8d3511156148ca578586fd5b6148d78e8e358f016141c3565b909c509a5067ffffffffffffffff60208e013511156148f4578586fd5b6149048e60208f01358f016141c3565b909a50985067ffffffffffffffff60408e01351115614921578586fd5b6149318e60408f01358f016141c3565b909850965067ffffffffffffffff60608e0135111561494e578586fd5b61495e8e60608f01358f016141c3565b909650945067ffffffffffffffff60808e0135111561497b578081fd5b61498b8e60808f01358f016141c3565b909450925067ffffffffffffffff60a08e013511156149a8578081fd5b6149b88e60a08f01358f016141c3565b81935080925050509295989b509295989b509295989b565b600080600080604085870312156149e5578182fd5b843567ffffffffffffffff808211156149fc578384fd5b614a08888389016141c3565b90965094506020870135915080821115614a20578384fd5b50614a2d878288016141c3565b95989497509550505050565b60008060408385031215614a4b578182fd5b823567ffffffffffffffff80821115614a62578384fd5b818501915085601f830112614a75578384fd5b81356020614a82826153c3565b604051614a8f8282615480565b8381528281019150858301838502870184018b1015614aac578889fd5b8896505b84871015614ad557614ac1816141a7565b835260019690960195918301918301614ab0565b5096505086013592505080821115614aeb578283fd5b50614af88582860161420c565b9150509250929050565b600060208284031215614b13578081fd5b8151614347816155a0565b600060208284031215614b2f578081fd5b8135614347816155b1565b600060208284031215614b4b578081fd5b8151614347816155b1565b600060208284031215614b67578081fd5b5035919050565b600060208284031215614b7f578081fd5b5051919050565b60008060408385031215614b98578182fd5b82359150614377602084016141a7565b600080600060608486031215614bbc578081fd5b83359250614bcc602085016141a7565b9150604084013590509250925092565b81835260006020808501945082825b85811015614c1757600160a060020a03614c04836141a7565b1687529582019590820190600101614beb565b509495945050505050565b8183526020808401936000918085028201810184845b8781101561427157848303601f19018952813536889003601e19018112614c5d578687fd5b8701803567ffffffffffffffff811115614c75578788fd5b803603891315614c83578788fd5b614c908582888501614d20565b9a86019a9450505090830190600101614c38565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614cd5578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b83811015614c1757815187529582019590820190600101614d04565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452614d61816020860160208601615416565b601f01601f19169290920160200192915050565b60007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614da3578081fd5b60208302808584379190910190815292915050565b815160009082906020808601845b83811015614de257815185529382019390820190600101614dc6565b50929695505050505050565b60008251614e00818460208701615416565b9190910192915050565b6000600160a060020a03808816835280871660208401525060a06040830152614e3660a0830186614cf1565b8281036060840152614e488186614cf1565b90508281036080840152614e5c8185614d49565b98975050505050505050565b6000600160a060020a03808816835280871660208401525084604083015283606083015260a06080830152614ea060a0830184614d49565b979650505050505050565b600160a060020a0385168152836020820152608060408201526000614ed36080830185614d49565b8281036060840152614ea08185614d49565b608081526000614ef9608083018a8c614bdc565b8281036020840152614f0c81898b614bdc565b90508281036040840152614f21818789614ca4565b90508281036060840152614f36818587614ca4565b9b9a5050505050505050505050565b60a081526000614f5960a083018c8e614bdc565b8281036020840152614f6c818b8d614bdc565b90508281036040840152614f8181898b614ca4565b90508281036060840152614f96818789614ca4565b90508281036080840152614fab818587614c22565b9d9c50505050505050505050505050565b606081526000614fd060608301888a614ca4565b8281036020840152614fe3818789614ca4565b90508281036040840152614ff8818587614c22565b9998505050505050505050565b6020815260006143476020830184614cf1565b60408152600061502b6040830186614cf1565b828103602084015261503e818587614ca4565b9695505050505050565b60408152600061505b6040830185614cf1565b828103602084015261506d8185614cf1565b95945050505050565b6020815260006143476020830184614d49565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a6563746560408201527f6420746f6b656e73000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f4e6f206f70657261746f7220617070726f76616c000000000000000000000000604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f20616460408201527f6472657373000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201527f72207472616e7366657200000000000000000000000000000000000000000000606082015260800190565b60208082526017908201527f417272617973206e6f742073616d65206c656e6774682e000000000000000000604082015260600190565b60208082526016908201527f417272617973206e6f742073616d65206c656e67746800000000000000000000604082015260600190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060408201527f6d69736d61746368000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360408201527f7300000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f5f746f206d757374206265206e6f6e2d7a65726f2e0000000000000000000000604082015260600190565b848152600160a060020a0384166020820152608060408201526000614ed36080830185614d49565b84815283602082015260606040820152600061503e606083018486614d20565b6000808335601e19843603018112615394578283fd5b83018035915067ffffffffffffffff8211156153ae578283fd5b60200191503681900382131561420557600080fd5b600067ffffffffffffffff8211156153dd576153dd6154e1565b5060209081020190565b600082198211156153fa576153fa6154c8565b500190565b600082821015615411576154116154c8565b500390565b60005b83811015615431578181015183820152602001615419565b838111156113845750506000910152565b60028104600182168061545657607f821691505b6020821081141561547a5760e060020a634e487b7102600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff811182821017156154a6576154a66154e1565b6040525050565b60006000198214156154c1576154c16154c8565b5060010190565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600060033d111561551357600481823e5160e060020a90045b90565b600060443d10156155245790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561555457505050505090565b828501915081518181111561556c5750505050505090565b843d87010160208285010111156155865750505050505090565b61559560208286010187615480565b509095945050505050565b80151581146155ae57600080fd5b50565b600160e060020a0319811681146155ae57600080fdfea26469706673582212206d94c1cd80b046be44e70308314ffa834fc391799e3be849176d35de74ae1ad364736f6c63430008040033"

// DeployRegistryExtended deploys a new Ethereum contract, binding an instance of RegistryExtended to it.
func DeployRegistryExtended(auth *bind.TransactOpts, backend bind.ContractBackend, _uri string) (common.Address, *types.Transaction, *RegistryExtended, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryExtendedABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(RegistryExtendedBin), backend, _uri)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &RegistryExtended{RegistryExtendedCaller: RegistryExtendedCaller{contract: contract}, RegistryExtendedTransactor: RegistryExtendedTransactor{contract: contract}, RegistryExtendedFilterer: RegistryExtendedFilterer{contract: contract}}, nil
}

// RegistryExtended is an auto generated Go binding around an Ethereum contract.
type RegistryExtended struct {
	RegistryExtendedCaller     // Read-only binding to the contract
	RegistryExtendedTransactor // Write-only binding to the contract
	RegistryExtendedFilterer   // Log filterer for contract events
}

// RegistryExtendedCaller is an auto generated read-only Go binding around an Ethereum contract.
type RegistryExtendedCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryExtendedTransactor is an auto generated write-only Go binding around an Ethereum contract.
type RegistryExtendedTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryExtendedFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type RegistryExtendedFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// RegistryExtendedSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type RegistryExtendedSession struct {
	Contract     *RegistryExtended // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// RegistryExtendedCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type RegistryExtendedCallerSession struct {
	Contract *RegistryExtendedCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// RegistryExtendedTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type RegistryExtendedTransactorSession struct {
	Contract     *RegistryExtendedTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// RegistryExtendedRaw is an auto generated low-level Go binding around an Ethereum contract.
type RegistryExtendedRaw struct {
	Contract *RegistryExtended // Generic contract binding to access the raw methods on
}

// RegistryExtendedCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type RegistryExtendedCallerRaw struct {
	Contract *RegistryExtendedCaller // Generic read-only contract binding to access the raw methods on
}

// RegistryExtendedTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type RegistryExtendedTransactorRaw struct {
	Contract *RegistryExtendedTransactor // Generic write-only contract binding to access the raw methods on
}

// NewRegistryExtended creates a new instance of RegistryExtended, bound to a specific deployed contract.
func NewRegistryExtended(address common.Address, backend bind.ContractBackend) (*RegistryExtended, error) {
	contract, err := bindRegistryExtended(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &RegistryExtended{RegistryExtendedCaller: RegistryExtendedCaller{contract: contract}, RegistryExtendedTransactor: RegistryExtendedTransactor{contract: contract}, RegistryExtendedFilterer: RegistryExtendedFilterer{contract: contract}}, nil
}

// NewRegistryExtendedCaller creates a new read-only instance of RegistryExtended, bound to a specific deployed contract.
func NewRegistryExtendedCaller(address common.Address, caller bind.ContractCaller) (*RegistryExtendedCaller, error) {
	contract, err := bindRegistryExtended(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryExtendedCaller{contract: contract}, nil
}

// NewRegistryExtendedTransactor creates a new write-only instance of RegistryExtended, bound to a specific deployed contract.
func NewRegistryExtendedTransactor(address common.Address, transactor bind.ContractTransactor) (*RegistryExtendedTransactor, error) {
	contract, err := bindRegistryExtended(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &RegistryExtendedTransactor{contract: contract}, nil
}

// NewRegistryExtendedFilterer creates a new log filterer instance of RegistryExtended, bound to a specific deployed contract.
func NewRegistryExtendedFilterer(address common.Address, filterer bind.ContractFilterer) (*RegistryExtendedFilterer, error) {
	contract, err := bindRegistryExtended(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &RegistryExtendedFilterer{contract: contract}, nil
}

// bindRegistryExtended binds a generic wrapper to an already deployed contract.
func bindRegistryExtended(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(RegistryExtendedABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryExtended *RegistryExtendedRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryExtended.Contract.RegistryExtendedCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryExtended *RegistryExtendedRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryExtended.Contract.RegistryExtendedTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryExtended *RegistryExtendedRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryExtended.Contract.RegistryExtendedTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_RegistryExtended *RegistryExtendedCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _RegistryExtended.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_RegistryExtended *RegistryExtendedTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _RegistryExtended.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_RegistryExtended *RegistryExtendedTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _RegistryExtended.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_RegistryExtended *RegistryExtendedCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _RegistryExtended.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_RegistryExtended *RegistryExtendedSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _RegistryExtended.Contract.BalanceOf(&_RegistryExtended.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_RegistryExtended *RegistryExtendedCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _RegistryExtended.Contract.BalanceOf(&_RegistryExtended.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_RegistryExtended *RegistryExtendedCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _RegistryExtended.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_RegistryExtended *RegistryExtendedSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _RegistryExtended.Contract.BalanceOfBatch(&_RegistryExtended.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_RegistryExtended *RegistryExtendedCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _RegistryExtended.Contract.BalanceOfBatch(&_RegistryExtended.CallOpts, accounts, ids)
}

// CertificateStorage is a free data retrieval call binding the contract method 0xd6878ffb.
//
// Solidity: function certificateStorage(uint256 ) view returns(uint256 topic, address issuer, bytes validityData, bytes data)
func (_RegistryExtended *RegistryExtendedCaller) CertificateStorage(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Topic        *big.Int
	Issuer       common.Address
	ValidityData []byte
	Data         []byte
}, error) {
	var out []interface{}
	err := _RegistryExtended.contract.Call(opts, &out, "certificateStorage", arg0)

	outstruct := new(struct {
		Topic        *big.Int
		Issuer       common.Address
		ValidityData []byte
		Data         []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Topic = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Issuer = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.ValidityData = *abi.ConvertType(out[2], new([]byte)).(*[]byte)
	outstruct.Data = *abi.ConvertType(out[3], new([]byte)).(*[]byte)

	return *outstruct, err

}

// CertificateStorage is a free data retrieval call binding the contract method 0xd6878ffb.
//
// Solidity: function certificateStorage(uint256 ) view returns(uint256 topic, address issuer, bytes validityData, bytes data)
func (_RegistryExtended *RegistryExtendedSession) CertificateStorage(arg0 *big.Int) (struct {
	Topic        *big.Int
	Issuer       common.Address
	ValidityData []byte
	Data         []byte
}, error) {
	return _RegistryExtended.Contract.CertificateStorage(&_RegistryExtended.CallOpts, arg0)
}

// CertificateStorage is a free data retrieval call binding the contract method 0xd6878ffb.
//
// Solidity: function certificateStorage(uint256 ) view returns(uint256 topic, address issuer, bytes validityData, bytes data)
func (_RegistryExtended *RegistryExtendedCallerSession) CertificateStorage(arg0 *big.Int) (struct {
	Topic        *big.Int
	Issuer       common.Address
	ValidityData []byte
	Data         []byte
}, error) {
	return _RegistryExtended.Contract.CertificateStorage(&_RegistryExtended.CallOpts, arg0)
}

// ClaimedBalanceOf is a free data retrieval call binding the contract method 0x3ebbaaa5.
//
// Solidity: function claimedBalanceOf(address _owner, uint256 _id) view returns(uint256)
func (_RegistryExtended *RegistryExtendedCaller) ClaimedBalanceOf(opts *bind.CallOpts, _owner common.Address, _id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _RegistryExtended.contract.Call(opts, &out, "claimedBalanceOf", _owner, _id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimedBalanceOf is a free data retrieval call binding the contract method 0x3ebbaaa5.
//
// Solidity: function claimedBalanceOf(address _owner, uint256 _id) view returns(uint256)
func (_RegistryExtended *RegistryExtendedSession) ClaimedBalanceOf(_owner common.Address, _id *big.Int) (*big.Int, error) {
	return _RegistryExtended.Contract.ClaimedBalanceOf(&_RegistryExtended.CallOpts, _owner, _id)
}

// ClaimedBalanceOf is a free data retrieval call binding the contract method 0x3ebbaaa5.
//
// Solidity: function claimedBalanceOf(address _owner, uint256 _id) view returns(uint256)
func (_RegistryExtended *RegistryExtendedCallerSession) ClaimedBalanceOf(_owner common.Address, _id *big.Int) (*big.Int, error) {
	return _RegistryExtended.Contract.ClaimedBalanceOf(&_RegistryExtended.CallOpts, _owner, _id)
}

// ClaimedBalanceOfBatch is a free data retrieval call binding the contract method 0x8ed87075.
//
// Solidity: function claimedBalanceOfBatch(address[] _owners, uint256[] _ids) view returns(uint256[])
func (_RegistryExtended *RegistryExtendedCaller) ClaimedBalanceOfBatch(opts *bind.CallOpts, _owners []common.Address, _ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _RegistryExtended.contract.Call(opts, &out, "claimedBalanceOfBatch", _owners, _ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// ClaimedBalanceOfBatch is a free data retrieval call binding the contract method 0x8ed87075.
//
// Solidity: function claimedBalanceOfBatch(address[] _owners, uint256[] _ids) view returns(uint256[])
func (_RegistryExtended *RegistryExtendedSession) ClaimedBalanceOfBatch(_owners []common.Address, _ids []*big.Int) ([]*big.Int, error) {
	return _RegistryExtended.Contract.ClaimedBalanceOfBatch(&_RegistryExtended.CallOpts, _owners, _ids)
}

// ClaimedBalanceOfBatch is a free data retrieval call binding the contract method 0x8ed87075.
//
// Solidity: function claimedBalanceOfBatch(address[] _owners, uint256[] _ids) view returns(uint256[])
func (_RegistryExtended *RegistryExtendedCallerSession) ClaimedBalanceOfBatch(_owners []common.Address, _ids []*big.Int) ([]*big.Int, error) {
	return _RegistryExtended.Contract.ClaimedBalanceOfBatch(&_RegistryExtended.CallOpts, _owners, _ids)
}

// ClaimedBalances is a free data retrieval call binding the contract method 0xc48238b0.
//
// Solidity: function claimedBalances(uint256 , address ) view returns(uint256)
func (_RegistryExtended *RegistryExtendedCaller) ClaimedBalances(opts *bind.CallOpts, arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _RegistryExtended.contract.Call(opts, &out, "claimedBalances", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ClaimedBalances is a free data retrieval call binding the contract method 0xc48238b0.
//
// Solidity: function claimedBalances(uint256 , address ) view returns(uint256)
func (_RegistryExtended *RegistryExtendedSession) ClaimedBalances(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _RegistryExtended.Contract.ClaimedBalances(&_RegistryExtended.CallOpts, arg0, arg1)
}

// ClaimedBalances is a free data retrieval call binding the contract method 0xc48238b0.
//
// Solidity: function claimedBalances(uint256 , address ) view returns(uint256)
func (_RegistryExtended *RegistryExtendedCallerSession) ClaimedBalances(arg0 *big.Int, arg1 common.Address) (*big.Int, error) {
	return _RegistryExtended.Contract.ClaimedBalances(&_RegistryExtended.CallOpts, arg0, arg1)
}

// GetCertificate is a free data retrieval call binding the contract method 0x51640fee.
//
// Solidity: function getCertificate(uint256 _id) view returns(address issuer, uint256 topic, bytes validityCall, bytes data)
func (_RegistryExtended *RegistryExtendedCaller) GetCertificate(opts *bind.CallOpts, _id *big.Int) (struct {
	Issuer       common.Address
	Topic        *big.Int
	ValidityCall []byte
	Data         []byte
}, error) {
	var out []interface{}
	err := _RegistryExtended.contract.Call(opts, &out, "getCertificate", _id)

	outstruct := new(struct {
		Issuer       common.Address
		Topic        *big.Int
		ValidityCall []byte
		Data         []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Issuer = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Topic = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.ValidityCall = *abi.ConvertType(out[2], new([]byte)).(*[]byte)
	outstruct.Data = *abi.ConvertType(out[3], new([]byte)).(*[]byte)

	return *outstruct, err

}

// GetCertificate is a free data retrieval call binding the contract method 0x51640fee.
//
// Solidity: function getCertificate(uint256 _id) view returns(address issuer, uint256 topic, bytes validityCall, bytes data)
func (_RegistryExtended *RegistryExtendedSession) GetCertificate(_id *big.Int) (struct {
	Issuer       common.Address
	Topic        *big.Int
	ValidityCall []byte
	Data         []byte
}, error) {
	return _RegistryExtended.Contract.GetCertificate(&_RegistryExtended.CallOpts, _id)
}

// GetCertificate is a free data retrieval call binding the contract method 0x51640fee.
//
// Solidity: function getCertificate(uint256 _id) view returns(address issuer, uint256 topic, bytes validityCall, bytes data)
func (_RegistryExtended *RegistryExtendedCallerSession) GetCertificate(_id *big.Int) (struct {
	Issuer       common.Address
	Topic        *big.Int
	ValidityCall []byte
	Data         []byte
}, error) {
	return _RegistryExtended.Contract.GetCertificate(&_RegistryExtended.CallOpts, _id)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_RegistryExtended *RegistryExtendedCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _RegistryExtended.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_RegistryExtended *RegistryExtendedSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _RegistryExtended.Contract.IsApprovedForAll(&_RegistryExtended.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_RegistryExtended *RegistryExtendedCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _RegistryExtended.Contract.IsApprovedForAll(&_RegistryExtended.CallOpts, account, operator)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_RegistryExtended *RegistryExtendedCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _RegistryExtended.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_RegistryExtended *RegistryExtendedSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _RegistryExtended.Contract.SupportsInterface(&_RegistryExtended.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_RegistryExtended *RegistryExtendedCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _RegistryExtended.Contract.SupportsInterface(&_RegistryExtended.CallOpts, interfaceId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_RegistryExtended *RegistryExtendedCaller) Uri(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _RegistryExtended.contract.Call(opts, &out, "uri", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_RegistryExtended *RegistryExtendedSession) Uri(arg0 *big.Int) (string, error) {
	return _RegistryExtended.Contract.Uri(&_RegistryExtended.CallOpts, arg0)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 ) view returns(string)
func (_RegistryExtended *RegistryExtendedCallerSession) Uri(arg0 *big.Int) (string, error) {
	return _RegistryExtended.Contract.Uri(&_RegistryExtended.CallOpts, arg0)
}

// BatchIssue is a paid mutator transaction binding the contract method 0x8673605a.
//
// Solidity: function batchIssue(address _to, bytes[] _validityData, uint256[] _topics, uint256[] _values, bytes[] _data) returns(uint256[] ids)
func (_RegistryExtended *RegistryExtendedTransactor) BatchIssue(opts *bind.TransactOpts, _to common.Address, _validityData [][]byte, _topics []*big.Int, _values []*big.Int, _data [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.contract.Transact(opts, "batchIssue", _to, _validityData, _topics, _values, _data)
}

// BatchIssue is a paid mutator transaction binding the contract method 0x8673605a.
//
// Solidity: function batchIssue(address _to, bytes[] _validityData, uint256[] _topics, uint256[] _values, bytes[] _data) returns(uint256[] ids)
func (_RegistryExtended *RegistryExtendedSession) BatchIssue(_to common.Address, _validityData [][]byte, _topics []*big.Int, _values []*big.Int, _data [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.BatchIssue(&_RegistryExtended.TransactOpts, _to, _validityData, _topics, _values, _data)
}

// BatchIssue is a paid mutator transaction binding the contract method 0x8673605a.
//
// Solidity: function batchIssue(address _to, bytes[] _validityData, uint256[] _topics, uint256[] _values, bytes[] _data) returns(uint256[] ids)
func (_RegistryExtended *RegistryExtendedTransactorSession) BatchIssue(_to common.Address, _validityData [][]byte, _topics []*big.Int, _values []*big.Int, _data [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.BatchIssue(&_RegistryExtended.TransactOpts, _to, _validityData, _topics, _values, _data)
}

// BatchIssueMultiple is a paid mutator transaction binding the contract method 0x8838a9d7.
//
// Solidity: function batchIssueMultiple(address[] _to, bytes[] _validityData, uint256[] _topics, uint256[] _values, bytes[] _data) returns(uint256[] ids)
func (_RegistryExtended *RegistryExtendedTransactor) BatchIssueMultiple(opts *bind.TransactOpts, _to []common.Address, _validityData [][]byte, _topics []*big.Int, _values []*big.Int, _data [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.contract.Transact(opts, "batchIssueMultiple", _to, _validityData, _topics, _values, _data)
}

// BatchIssueMultiple is a paid mutator transaction binding the contract method 0x8838a9d7.
//
// Solidity: function batchIssueMultiple(address[] _to, bytes[] _validityData, uint256[] _topics, uint256[] _values, bytes[] _data) returns(uint256[] ids)
func (_RegistryExtended *RegistryExtendedSession) BatchIssueMultiple(_to []common.Address, _validityData [][]byte, _topics []*big.Int, _values []*big.Int, _data [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.BatchIssueMultiple(&_RegistryExtended.TransactOpts, _to, _validityData, _topics, _values, _data)
}

// BatchIssueMultiple is a paid mutator transaction binding the contract method 0x8838a9d7.
//
// Solidity: function batchIssueMultiple(address[] _to, bytes[] _validityData, uint256[] _topics, uint256[] _values, bytes[] _data) returns(uint256[] ids)
func (_RegistryExtended *RegistryExtendedTransactorSession) BatchIssueMultiple(_to []common.Address, _validityData [][]byte, _topics []*big.Int, _values []*big.Int, _data [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.BatchIssueMultiple(&_RegistryExtended.TransactOpts, _to, _validityData, _topics, _values, _data)
}

// Issue is a paid mutator transaction binding the contract method 0x543d526d.
//
// Solidity: function issue(address _to, bytes _validityData, uint256 _topic, uint256 _value, bytes _data) returns(uint256 id)
func (_RegistryExtended *RegistryExtendedTransactor) Issue(opts *bind.TransactOpts, _to common.Address, _validityData []byte, _topic *big.Int, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _RegistryExtended.contract.Transact(opts, "issue", _to, _validityData, _topic, _value, _data)
}

// Issue is a paid mutator transaction binding the contract method 0x543d526d.
//
// Solidity: function issue(address _to, bytes _validityData, uint256 _topic, uint256 _value, bytes _data) returns(uint256 id)
func (_RegistryExtended *RegistryExtendedSession) Issue(_to common.Address, _validityData []byte, _topic *big.Int, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.Issue(&_RegistryExtended.TransactOpts, _to, _validityData, _topic, _value, _data)
}

// Issue is a paid mutator transaction binding the contract method 0x543d526d.
//
// Solidity: function issue(address _to, bytes _validityData, uint256 _topic, uint256 _value, bytes _data) returns(uint256 id)
func (_RegistryExtended *RegistryExtendedTransactorSession) Issue(_to common.Address, _validityData []byte, _topic *big.Int, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.Issue(&_RegistryExtended.TransactOpts, _to, _validityData, _topic, _value, _data)
}

// Mint is a paid mutator transaction binding the contract method 0x836a1040.
//
// Solidity: function mint(uint256 _id, address _to, uint256 _quantity) returns()
func (_RegistryExtended *RegistryExtendedTransactor) Mint(opts *bind.TransactOpts, _id *big.Int, _to common.Address, _quantity *big.Int) (*types.Transaction, error) {
	return _RegistryExtended.contract.Transact(opts, "mint", _id, _to, _quantity)
}

// Mint is a paid mutator transaction binding the contract method 0x836a1040.
//
// Solidity: function mint(uint256 _id, address _to, uint256 _quantity) returns()
func (_RegistryExtended *RegistryExtendedSession) Mint(_id *big.Int, _to common.Address, _quantity *big.Int) (*types.Transaction, error) {
	return _RegistryExtended.Contract.Mint(&_RegistryExtended.TransactOpts, _id, _to, _quantity)
}

// Mint is a paid mutator transaction binding the contract method 0x836a1040.
//
// Solidity: function mint(uint256 _id, address _to, uint256 _quantity) returns()
func (_RegistryExtended *RegistryExtendedTransactorSession) Mint(_id *big.Int, _to common.Address, _quantity *big.Int) (*types.Transaction, error) {
	return _RegistryExtended.Contract.Mint(&_RegistryExtended.TransactOpts, _id, _to, _quantity)
}

// SafeBatchTransferAndClaimFrom is a paid mutator transaction binding the contract method 0x760c6caf.
//
// Solidity: function safeBatchTransferAndClaimFrom(address _from, address _to, uint256[] _ids, uint256[] _values, bytes _data, bytes[] _claimData) returns()
func (_RegistryExtended *RegistryExtendedTransactor) SafeBatchTransferAndClaimFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _ids []*big.Int, _values []*big.Int, _data []byte, _claimData [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.contract.Transact(opts, "safeBatchTransferAndClaimFrom", _from, _to, _ids, _values, _data, _claimData)
}

// SafeBatchTransferAndClaimFrom is a paid mutator transaction binding the contract method 0x760c6caf.
//
// Solidity: function safeBatchTransferAndClaimFrom(address _from, address _to, uint256[] _ids, uint256[] _values, bytes _data, bytes[] _claimData) returns()
func (_RegistryExtended *RegistryExtendedSession) SafeBatchTransferAndClaimFrom(_from common.Address, _to common.Address, _ids []*big.Int, _values []*big.Int, _data []byte, _claimData [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SafeBatchTransferAndClaimFrom(&_RegistryExtended.TransactOpts, _from, _to, _ids, _values, _data, _claimData)
}

// SafeBatchTransferAndClaimFrom is a paid mutator transaction binding the contract method 0x760c6caf.
//
// Solidity: function safeBatchTransferAndClaimFrom(address _from, address _to, uint256[] _ids, uint256[] _values, bytes _data, bytes[] _claimData) returns()
func (_RegistryExtended *RegistryExtendedTransactorSession) SafeBatchTransferAndClaimFrom(_from common.Address, _to common.Address, _ids []*big.Int, _values []*big.Int, _data []byte, _claimData [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SafeBatchTransferAndClaimFrom(&_RegistryExtended.TransactOpts, _from, _to, _ids, _values, _data, _claimData)
}

// SafeBatchTransferAndClaimFromMultiple is a paid mutator transaction binding the contract method 0xba688a94.
//
// Solidity: function safeBatchTransferAndClaimFromMultiple(address[] _from, address[] _to, uint256[] _ids, uint256[] _values, bytes[] _data, bytes[] _claimData) returns()
func (_RegistryExtended *RegistryExtendedTransactor) SafeBatchTransferAndClaimFromMultiple(opts *bind.TransactOpts, _from []common.Address, _to []common.Address, _ids []*big.Int, _values []*big.Int, _data [][]byte, _claimData [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.contract.Transact(opts, "safeBatchTransferAndClaimFromMultiple", _from, _to, _ids, _values, _data, _claimData)
}

// SafeBatchTransferAndClaimFromMultiple is a paid mutator transaction binding the contract method 0xba688a94.
//
// Solidity: function safeBatchTransferAndClaimFromMultiple(address[] _from, address[] _to, uint256[] _ids, uint256[] _values, bytes[] _data, bytes[] _claimData) returns()
func (_RegistryExtended *RegistryExtendedSession) SafeBatchTransferAndClaimFromMultiple(_from []common.Address, _to []common.Address, _ids []*big.Int, _values []*big.Int, _data [][]byte, _claimData [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SafeBatchTransferAndClaimFromMultiple(&_RegistryExtended.TransactOpts, _from, _to, _ids, _values, _data, _claimData)
}

// SafeBatchTransferAndClaimFromMultiple is a paid mutator transaction binding the contract method 0xba688a94.
//
// Solidity: function safeBatchTransferAndClaimFromMultiple(address[] _from, address[] _to, uint256[] _ids, uint256[] _values, bytes[] _data, bytes[] _claimData) returns()
func (_RegistryExtended *RegistryExtendedTransactorSession) SafeBatchTransferAndClaimFromMultiple(_from []common.Address, _to []common.Address, _ids []*big.Int, _values []*big.Int, _data [][]byte, _claimData [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SafeBatchTransferAndClaimFromMultiple(&_RegistryExtended.TransactOpts, _from, _to, _ids, _values, _data, _claimData)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_RegistryExtended *RegistryExtendedTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _RegistryExtended.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_RegistryExtended *RegistryExtendedSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SafeBatchTransferFrom(&_RegistryExtended.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_RegistryExtended *RegistryExtendedTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SafeBatchTransferFrom(&_RegistryExtended.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFromMultiple is a paid mutator transaction binding the contract method 0xb93bbaa0.
//
// Solidity: function safeBatchTransferFromMultiple(address[] _from, address[] _to, uint256[] _ids, uint256[] _values, bytes[] _data) returns()
func (_RegistryExtended *RegistryExtendedTransactor) SafeBatchTransferFromMultiple(opts *bind.TransactOpts, _from []common.Address, _to []common.Address, _ids []*big.Int, _values []*big.Int, _data [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.contract.Transact(opts, "safeBatchTransferFromMultiple", _from, _to, _ids, _values, _data)
}

// SafeBatchTransferFromMultiple is a paid mutator transaction binding the contract method 0xb93bbaa0.
//
// Solidity: function safeBatchTransferFromMultiple(address[] _from, address[] _to, uint256[] _ids, uint256[] _values, bytes[] _data) returns()
func (_RegistryExtended *RegistryExtendedSession) SafeBatchTransferFromMultiple(_from []common.Address, _to []common.Address, _ids []*big.Int, _values []*big.Int, _data [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SafeBatchTransferFromMultiple(&_RegistryExtended.TransactOpts, _from, _to, _ids, _values, _data)
}

// SafeBatchTransferFromMultiple is a paid mutator transaction binding the contract method 0xb93bbaa0.
//
// Solidity: function safeBatchTransferFromMultiple(address[] _from, address[] _to, uint256[] _ids, uint256[] _values, bytes[] _data) returns()
func (_RegistryExtended *RegistryExtendedTransactorSession) SafeBatchTransferFromMultiple(_from []common.Address, _to []common.Address, _ids []*big.Int, _values []*big.Int, _data [][]byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SafeBatchTransferFromMultiple(&_RegistryExtended.TransactOpts, _from, _to, _ids, _values, _data)
}

// SafeTransferAndClaimFrom is a paid mutator transaction binding the contract method 0xc5308dd8.
//
// Solidity: function safeTransferAndClaimFrom(address _from, address _to, uint256 _id, uint256 _value, bytes _data, bytes _claimData) returns()
func (_RegistryExtended *RegistryExtendedTransactor) SafeTransferAndClaimFrom(opts *bind.TransactOpts, _from common.Address, _to common.Address, _id *big.Int, _value *big.Int, _data []byte, _claimData []byte) (*types.Transaction, error) {
	return _RegistryExtended.contract.Transact(opts, "safeTransferAndClaimFrom", _from, _to, _id, _value, _data, _claimData)
}

// SafeTransferAndClaimFrom is a paid mutator transaction binding the contract method 0xc5308dd8.
//
// Solidity: function safeTransferAndClaimFrom(address _from, address _to, uint256 _id, uint256 _value, bytes _data, bytes _claimData) returns()
func (_RegistryExtended *RegistryExtendedSession) SafeTransferAndClaimFrom(_from common.Address, _to common.Address, _id *big.Int, _value *big.Int, _data []byte, _claimData []byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SafeTransferAndClaimFrom(&_RegistryExtended.TransactOpts, _from, _to, _id, _value, _data, _claimData)
}

// SafeTransferAndClaimFrom is a paid mutator transaction binding the contract method 0xc5308dd8.
//
// Solidity: function safeTransferAndClaimFrom(address _from, address _to, uint256 _id, uint256 _value, bytes _data, bytes _claimData) returns()
func (_RegistryExtended *RegistryExtendedTransactorSession) SafeTransferAndClaimFrom(_from common.Address, _to common.Address, _id *big.Int, _value *big.Int, _data []byte, _claimData []byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SafeTransferAndClaimFrom(&_RegistryExtended.TransactOpts, _from, _to, _id, _value, _data, _claimData)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_RegistryExtended *RegistryExtendedTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _RegistryExtended.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_RegistryExtended *RegistryExtendedSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SafeTransferFrom(&_RegistryExtended.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_RegistryExtended *RegistryExtendedTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SafeTransferFrom(&_RegistryExtended.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_RegistryExtended *RegistryExtendedTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _RegistryExtended.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_RegistryExtended *RegistryExtendedSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SetApprovalForAll(&_RegistryExtended.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_RegistryExtended *RegistryExtendedTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _RegistryExtended.Contract.SetApprovalForAll(&_RegistryExtended.TransactOpts, operator, approved)
}

// RegistryExtendedApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the RegistryExtended contract.
type RegistryExtendedApprovalForAllIterator struct {
	Event *RegistryExtendedApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryExtendedApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryExtendedApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryExtendedApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryExtendedApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryExtendedApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryExtendedApprovalForAll represents a ApprovalForAll event raised by the RegistryExtended contract.
type RegistryExtendedApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_RegistryExtended *RegistryExtendedFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*RegistryExtendedApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _RegistryExtended.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &RegistryExtendedApprovalForAllIterator{contract: _RegistryExtended.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_RegistryExtended *RegistryExtendedFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *RegistryExtendedApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _RegistryExtended.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryExtendedApprovalForAll)
				if err := _RegistryExtended.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_RegistryExtended *RegistryExtendedFilterer) ParseApprovalForAll(log types.Log) (*RegistryExtendedApprovalForAll, error) {
	event := new(RegistryExtendedApprovalForAll)
	if err := _RegistryExtended.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryExtendedClaimBatchIterator is returned from FilterClaimBatch and is used to iterate over the raw logs and unpacked data for ClaimBatch events raised by the RegistryExtended contract.
type RegistryExtendedClaimBatchIterator struct {
	Event *RegistryExtendedClaimBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryExtendedClaimBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryExtendedClaimBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryExtendedClaimBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryExtendedClaimBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryExtendedClaimBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryExtendedClaimBatch represents a ClaimBatch event raised by the RegistryExtended contract.
type RegistryExtendedClaimBatch struct {
	ClaimIssuer  common.Address
	ClaimSubject common.Address
	Topics       []*big.Int
	Ids          []*big.Int
	Values       []*big.Int
	ClaimData    [][]byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterClaimBatch is a free log retrieval operation binding the contract event 0x61a69d58bffe77be60879031f7e6d3d17fab9c88a681899a549d20ae8a39f8d0.
//
// Solidity: event ClaimBatch(address indexed _claimIssuer, address indexed _claimSubject, uint256[] indexed _topics, uint256[] _ids, uint256[] _values, bytes[] _claimData)
func (_RegistryExtended *RegistryExtendedFilterer) FilterClaimBatch(opts *bind.FilterOpts, _claimIssuer []common.Address, _claimSubject []common.Address, _topics [][]*big.Int) (*RegistryExtendedClaimBatchIterator, error) {

	var _claimIssuerRule []interface{}
	for _, _claimIssuerItem := range _claimIssuer {
		_claimIssuerRule = append(_claimIssuerRule, _claimIssuerItem)
	}
	var _claimSubjectRule []interface{}
	for _, _claimSubjectItem := range _claimSubject {
		_claimSubjectRule = append(_claimSubjectRule, _claimSubjectItem)
	}
	var _topicsRule []interface{}
	for _, _topicsItem := range _topics {
		_topicsRule = append(_topicsRule, _topicsItem)
	}

	logs, sub, err := _RegistryExtended.contract.FilterLogs(opts, "ClaimBatch", _claimIssuerRule, _claimSubjectRule, _topicsRule)
	if err != nil {
		return nil, err
	}
	return &RegistryExtendedClaimBatchIterator{contract: _RegistryExtended.contract, event: "ClaimBatch", logs: logs, sub: sub}, nil
}

// WatchClaimBatch is a free log subscription operation binding the contract event 0x61a69d58bffe77be60879031f7e6d3d17fab9c88a681899a549d20ae8a39f8d0.
//
// Solidity: event ClaimBatch(address indexed _claimIssuer, address indexed _claimSubject, uint256[] indexed _topics, uint256[] _ids, uint256[] _values, bytes[] _claimData)
func (_RegistryExtended *RegistryExtendedFilterer) WatchClaimBatch(opts *bind.WatchOpts, sink chan<- *RegistryExtendedClaimBatch, _claimIssuer []common.Address, _claimSubject []common.Address, _topics [][]*big.Int) (event.Subscription, error) {

	var _claimIssuerRule []interface{}
	for _, _claimIssuerItem := range _claimIssuer {
		_claimIssuerRule = append(_claimIssuerRule, _claimIssuerItem)
	}
	var _claimSubjectRule []interface{}
	for _, _claimSubjectItem := range _claimSubject {
		_claimSubjectRule = append(_claimSubjectRule, _claimSubjectItem)
	}
	var _topicsRule []interface{}
	for _, _topicsItem := range _topics {
		_topicsRule = append(_topicsRule, _topicsItem)
	}

	logs, sub, err := _RegistryExtended.contract.WatchLogs(opts, "ClaimBatch", _claimIssuerRule, _claimSubjectRule, _topicsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryExtendedClaimBatch)
				if err := _RegistryExtended.contract.UnpackLog(event, "ClaimBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimBatch is a log parse operation binding the contract event 0x61a69d58bffe77be60879031f7e6d3d17fab9c88a681899a549d20ae8a39f8d0.
//
// Solidity: event ClaimBatch(address indexed _claimIssuer, address indexed _claimSubject, uint256[] indexed _topics, uint256[] _ids, uint256[] _values, bytes[] _claimData)
func (_RegistryExtended *RegistryExtendedFilterer) ParseClaimBatch(log types.Log) (*RegistryExtendedClaimBatch, error) {
	event := new(RegistryExtendedClaimBatch)
	if err := _RegistryExtended.contract.UnpackLog(event, "ClaimBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryExtendedClaimBatchMultipleIterator is returned from FilterClaimBatchMultiple and is used to iterate over the raw logs and unpacked data for ClaimBatchMultiple events raised by the RegistryExtended contract.
type RegistryExtendedClaimBatchMultipleIterator struct {
	Event *RegistryExtendedClaimBatchMultiple // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryExtendedClaimBatchMultipleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryExtendedClaimBatchMultiple)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryExtendedClaimBatchMultiple)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryExtendedClaimBatchMultipleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryExtendedClaimBatchMultipleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryExtendedClaimBatchMultiple represents a ClaimBatchMultiple event raised by the RegistryExtended contract.
type RegistryExtendedClaimBatchMultiple struct {
	ClaimIssuer  []common.Address
	ClaimSubject []common.Address
	Topics       []*big.Int
	Ids          []*big.Int
	Values       []*big.Int
	ClaimData    [][]byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterClaimBatchMultiple is a free log retrieval operation binding the contract event 0x5fb4aec6c096dfcae3899570b7e14f9743bb4b1801780db6d8a9c4ffe21aaaac.
//
// Solidity: event ClaimBatchMultiple(address[] _claimIssuer, address[] _claimSubject, uint256[] indexed _topics, uint256[] _ids, uint256[] _values, bytes[] _claimData)
func (_RegistryExtended *RegistryExtendedFilterer) FilterClaimBatchMultiple(opts *bind.FilterOpts, _topics [][]*big.Int) (*RegistryExtendedClaimBatchMultipleIterator, error) {

	var _topicsRule []interface{}
	for _, _topicsItem := range _topics {
		_topicsRule = append(_topicsRule, _topicsItem)
	}

	logs, sub, err := _RegistryExtended.contract.FilterLogs(opts, "ClaimBatchMultiple", _topicsRule)
	if err != nil {
		return nil, err
	}
	return &RegistryExtendedClaimBatchMultipleIterator{contract: _RegistryExtended.contract, event: "ClaimBatchMultiple", logs: logs, sub: sub}, nil
}

// WatchClaimBatchMultiple is a free log subscription operation binding the contract event 0x5fb4aec6c096dfcae3899570b7e14f9743bb4b1801780db6d8a9c4ffe21aaaac.
//
// Solidity: event ClaimBatchMultiple(address[] _claimIssuer, address[] _claimSubject, uint256[] indexed _topics, uint256[] _ids, uint256[] _values, bytes[] _claimData)
func (_RegistryExtended *RegistryExtendedFilterer) WatchClaimBatchMultiple(opts *bind.WatchOpts, sink chan<- *RegistryExtendedClaimBatchMultiple, _topics [][]*big.Int) (event.Subscription, error) {

	var _topicsRule []interface{}
	for _, _topicsItem := range _topics {
		_topicsRule = append(_topicsRule, _topicsItem)
	}

	logs, sub, err := _RegistryExtended.contract.WatchLogs(opts, "ClaimBatchMultiple", _topicsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryExtendedClaimBatchMultiple)
				if err := _RegistryExtended.contract.UnpackLog(event, "ClaimBatchMultiple", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimBatchMultiple is a log parse operation binding the contract event 0x5fb4aec6c096dfcae3899570b7e14f9743bb4b1801780db6d8a9c4ffe21aaaac.
//
// Solidity: event ClaimBatchMultiple(address[] _claimIssuer, address[] _claimSubject, uint256[] indexed _topics, uint256[] _ids, uint256[] _values, bytes[] _claimData)
func (_RegistryExtended *RegistryExtendedFilterer) ParseClaimBatchMultiple(log types.Log) (*RegistryExtendedClaimBatchMultiple, error) {
	event := new(RegistryExtendedClaimBatchMultiple)
	if err := _RegistryExtended.contract.UnpackLog(event, "ClaimBatchMultiple", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryExtendedClaimSingleIterator is returned from FilterClaimSingle and is used to iterate over the raw logs and unpacked data for ClaimSingle events raised by the RegistryExtended contract.
type RegistryExtendedClaimSingleIterator struct {
	Event *RegistryExtendedClaimSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryExtendedClaimSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryExtendedClaimSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryExtendedClaimSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryExtendedClaimSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryExtendedClaimSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryExtendedClaimSingle represents a ClaimSingle event raised by the RegistryExtended contract.
type RegistryExtendedClaimSingle struct {
	ClaimIssuer  common.Address
	ClaimSubject common.Address
	Topic        *big.Int
	Id           *big.Int
	Value        *big.Int
	ClaimData    []byte
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterClaimSingle is a free log retrieval operation binding the contract event 0xde6a12665e566ee081354e23cd8474944fb8e89a25b46f2f9b50d378e7e53608.
//
// Solidity: event ClaimSingle(address indexed _claimIssuer, address indexed _claimSubject, uint256 indexed _topic, uint256 _id, uint256 _value, bytes _claimData)
func (_RegistryExtended *RegistryExtendedFilterer) FilterClaimSingle(opts *bind.FilterOpts, _claimIssuer []common.Address, _claimSubject []common.Address, _topic []*big.Int) (*RegistryExtendedClaimSingleIterator, error) {

	var _claimIssuerRule []interface{}
	for _, _claimIssuerItem := range _claimIssuer {
		_claimIssuerRule = append(_claimIssuerRule, _claimIssuerItem)
	}
	var _claimSubjectRule []interface{}
	for _, _claimSubjectItem := range _claimSubject {
		_claimSubjectRule = append(_claimSubjectRule, _claimSubjectItem)
	}
	var _topicRule []interface{}
	for _, _topicItem := range _topic {
		_topicRule = append(_topicRule, _topicItem)
	}

	logs, sub, err := _RegistryExtended.contract.FilterLogs(opts, "ClaimSingle", _claimIssuerRule, _claimSubjectRule, _topicRule)
	if err != nil {
		return nil, err
	}
	return &RegistryExtendedClaimSingleIterator{contract: _RegistryExtended.contract, event: "ClaimSingle", logs: logs, sub: sub}, nil
}

// WatchClaimSingle is a free log subscription operation binding the contract event 0xde6a12665e566ee081354e23cd8474944fb8e89a25b46f2f9b50d378e7e53608.
//
// Solidity: event ClaimSingle(address indexed _claimIssuer, address indexed _claimSubject, uint256 indexed _topic, uint256 _id, uint256 _value, bytes _claimData)
func (_RegistryExtended *RegistryExtendedFilterer) WatchClaimSingle(opts *bind.WatchOpts, sink chan<- *RegistryExtendedClaimSingle, _claimIssuer []common.Address, _claimSubject []common.Address, _topic []*big.Int) (event.Subscription, error) {

	var _claimIssuerRule []interface{}
	for _, _claimIssuerItem := range _claimIssuer {
		_claimIssuerRule = append(_claimIssuerRule, _claimIssuerItem)
	}
	var _claimSubjectRule []interface{}
	for _, _claimSubjectItem := range _claimSubject {
		_claimSubjectRule = append(_claimSubjectRule, _claimSubjectItem)
	}
	var _topicRule []interface{}
	for _, _topicItem := range _topic {
		_topicRule = append(_topicRule, _topicItem)
	}

	logs, sub, err := _RegistryExtended.contract.WatchLogs(opts, "ClaimSingle", _claimIssuerRule, _claimSubjectRule, _topicRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryExtendedClaimSingle)
				if err := _RegistryExtended.contract.UnpackLog(event, "ClaimSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseClaimSingle is a log parse operation binding the contract event 0xde6a12665e566ee081354e23cd8474944fb8e89a25b46f2f9b50d378e7e53608.
//
// Solidity: event ClaimSingle(address indexed _claimIssuer, address indexed _claimSubject, uint256 indexed _topic, uint256 _id, uint256 _value, bytes _claimData)
func (_RegistryExtended *RegistryExtendedFilterer) ParseClaimSingle(log types.Log) (*RegistryExtendedClaimSingle, error) {
	event := new(RegistryExtendedClaimSingle)
	if err := _RegistryExtended.contract.UnpackLog(event, "ClaimSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryExtendedIssuanceBatchIterator is returned from FilterIssuanceBatch and is used to iterate over the raw logs and unpacked data for IssuanceBatch events raised by the RegistryExtended contract.
type RegistryExtendedIssuanceBatchIterator struct {
	Event *RegistryExtendedIssuanceBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryExtendedIssuanceBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryExtendedIssuanceBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryExtendedIssuanceBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryExtendedIssuanceBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryExtendedIssuanceBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryExtendedIssuanceBatch represents a IssuanceBatch event raised by the RegistryExtended contract.
type RegistryExtendedIssuanceBatch struct {
	Issuer common.Address
	Topics []*big.Int
	Ids    []*big.Int
	Values []*big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterIssuanceBatch is a free log retrieval operation binding the contract event 0x4337762bcc37db59d5eea698d442c9782e625db731704f4f83ed376a09b64e6c.
//
// Solidity: event IssuanceBatch(address indexed _issuer, uint256[] indexed _topics, uint256[] _ids, uint256[] _values)
func (_RegistryExtended *RegistryExtendedFilterer) FilterIssuanceBatch(opts *bind.FilterOpts, _issuer []common.Address, _topics [][]*big.Int) (*RegistryExtendedIssuanceBatchIterator, error) {

	var _issuerRule []interface{}
	for _, _issuerItem := range _issuer {
		_issuerRule = append(_issuerRule, _issuerItem)
	}
	var _topicsRule []interface{}
	for _, _topicsItem := range _topics {
		_topicsRule = append(_topicsRule, _topicsItem)
	}

	logs, sub, err := _RegistryExtended.contract.FilterLogs(opts, "IssuanceBatch", _issuerRule, _topicsRule)
	if err != nil {
		return nil, err
	}
	return &RegistryExtendedIssuanceBatchIterator{contract: _RegistryExtended.contract, event: "IssuanceBatch", logs: logs, sub: sub}, nil
}

// WatchIssuanceBatch is a free log subscription operation binding the contract event 0x4337762bcc37db59d5eea698d442c9782e625db731704f4f83ed376a09b64e6c.
//
// Solidity: event IssuanceBatch(address indexed _issuer, uint256[] indexed _topics, uint256[] _ids, uint256[] _values)
func (_RegistryExtended *RegistryExtendedFilterer) WatchIssuanceBatch(opts *bind.WatchOpts, sink chan<- *RegistryExtendedIssuanceBatch, _issuer []common.Address, _topics [][]*big.Int) (event.Subscription, error) {

	var _issuerRule []interface{}
	for _, _issuerItem := range _issuer {
		_issuerRule = append(_issuerRule, _issuerItem)
	}
	var _topicsRule []interface{}
	for _, _topicsItem := range _topics {
		_topicsRule = append(_topicsRule, _topicsItem)
	}

	logs, sub, err := _RegistryExtended.contract.WatchLogs(opts, "IssuanceBatch", _issuerRule, _topicsRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryExtendedIssuanceBatch)
				if err := _RegistryExtended.contract.UnpackLog(event, "IssuanceBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIssuanceBatch is a log parse operation binding the contract event 0x4337762bcc37db59d5eea698d442c9782e625db731704f4f83ed376a09b64e6c.
//
// Solidity: event IssuanceBatch(address indexed _issuer, uint256[] indexed _topics, uint256[] _ids, uint256[] _values)
func (_RegistryExtended *RegistryExtendedFilterer) ParseIssuanceBatch(log types.Log) (*RegistryExtendedIssuanceBatch, error) {
	event := new(RegistryExtendedIssuanceBatch)
	if err := _RegistryExtended.contract.UnpackLog(event, "IssuanceBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryExtendedIssuanceSingleIterator is returned from FilterIssuanceSingle and is used to iterate over the raw logs and unpacked data for IssuanceSingle events raised by the RegistryExtended contract.
type RegistryExtendedIssuanceSingleIterator struct {
	Event *RegistryExtendedIssuanceSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryExtendedIssuanceSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryExtendedIssuanceSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryExtendedIssuanceSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryExtendedIssuanceSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryExtendedIssuanceSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryExtendedIssuanceSingle represents a IssuanceSingle event raised by the RegistryExtended contract.
type RegistryExtendedIssuanceSingle struct {
	Issuer common.Address
	Topic  *big.Int
	Id     *big.Int
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterIssuanceSingle is a free log retrieval operation binding the contract event 0x19fdba3b3fa810260206510aa7278c70ea23c0d104195bed67bfb27a3d82fbfe.
//
// Solidity: event IssuanceSingle(address indexed _issuer, uint256 indexed _topic, uint256 _id, uint256 _value)
func (_RegistryExtended *RegistryExtendedFilterer) FilterIssuanceSingle(opts *bind.FilterOpts, _issuer []common.Address, _topic []*big.Int) (*RegistryExtendedIssuanceSingleIterator, error) {

	var _issuerRule []interface{}
	for _, _issuerItem := range _issuer {
		_issuerRule = append(_issuerRule, _issuerItem)
	}
	var _topicRule []interface{}
	for _, _topicItem := range _topic {
		_topicRule = append(_topicRule, _topicItem)
	}

	logs, sub, err := _RegistryExtended.contract.FilterLogs(opts, "IssuanceSingle", _issuerRule, _topicRule)
	if err != nil {
		return nil, err
	}
	return &RegistryExtendedIssuanceSingleIterator{contract: _RegistryExtended.contract, event: "IssuanceSingle", logs: logs, sub: sub}, nil
}

// WatchIssuanceSingle is a free log subscription operation binding the contract event 0x19fdba3b3fa810260206510aa7278c70ea23c0d104195bed67bfb27a3d82fbfe.
//
// Solidity: event IssuanceSingle(address indexed _issuer, uint256 indexed _topic, uint256 _id, uint256 _value)
func (_RegistryExtended *RegistryExtendedFilterer) WatchIssuanceSingle(opts *bind.WatchOpts, sink chan<- *RegistryExtendedIssuanceSingle, _issuer []common.Address, _topic []*big.Int) (event.Subscription, error) {

	var _issuerRule []interface{}
	for _, _issuerItem := range _issuer {
		_issuerRule = append(_issuerRule, _issuerItem)
	}
	var _topicRule []interface{}
	for _, _topicItem := range _topic {
		_topicRule = append(_topicRule, _topicItem)
	}

	logs, sub, err := _RegistryExtended.contract.WatchLogs(opts, "IssuanceSingle", _issuerRule, _topicRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryExtendedIssuanceSingle)
				if err := _RegistryExtended.contract.UnpackLog(event, "IssuanceSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIssuanceSingle is a log parse operation binding the contract event 0x19fdba3b3fa810260206510aa7278c70ea23c0d104195bed67bfb27a3d82fbfe.
//
// Solidity: event IssuanceSingle(address indexed _issuer, uint256 indexed _topic, uint256 _id, uint256 _value)
func (_RegistryExtended *RegistryExtendedFilterer) ParseIssuanceSingle(log types.Log) (*RegistryExtendedIssuanceSingle, error) {
	event := new(RegistryExtendedIssuanceSingle)
	if err := _RegistryExtended.contract.UnpackLog(event, "IssuanceSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryExtendedTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the RegistryExtended contract.
type RegistryExtendedTransferBatchIterator struct {
	Event *RegistryExtendedTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryExtendedTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryExtendedTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryExtendedTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryExtendedTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryExtendedTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryExtendedTransferBatch represents a TransferBatch event raised by the RegistryExtended contract.
type RegistryExtendedTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_RegistryExtended *RegistryExtendedFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*RegistryExtendedTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _RegistryExtended.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &RegistryExtendedTransferBatchIterator{contract: _RegistryExtended.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_RegistryExtended *RegistryExtendedFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *RegistryExtendedTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _RegistryExtended.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryExtendedTransferBatch)
				if err := _RegistryExtended.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_RegistryExtended *RegistryExtendedFilterer) ParseTransferBatch(log types.Log) (*RegistryExtendedTransferBatch, error) {
	event := new(RegistryExtendedTransferBatch)
	if err := _RegistryExtended.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryExtendedTransferBatchMultipleIterator is returned from FilterTransferBatchMultiple and is used to iterate over the raw logs and unpacked data for TransferBatchMultiple events raised by the RegistryExtended contract.
type RegistryExtendedTransferBatchMultipleIterator struct {
	Event *RegistryExtendedTransferBatchMultiple // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryExtendedTransferBatchMultipleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryExtendedTransferBatchMultiple)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryExtendedTransferBatchMultiple)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryExtendedTransferBatchMultipleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryExtendedTransferBatchMultipleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryExtendedTransferBatchMultiple represents a TransferBatchMultiple event raised by the RegistryExtended contract.
type RegistryExtendedTransferBatchMultiple struct {
	Operator common.Address
	From     []common.Address
	To       []common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatchMultiple is a free log retrieval operation binding the contract event 0x9a17c5980bc0d14e313aaa844f04cd0ee291f743df00bf06337a3ce1db563be4.
//
// Solidity: event TransferBatchMultiple(address indexed operator, address[] from, address[] to, uint256[] ids, uint256[] values)
func (_RegistryExtended *RegistryExtendedFilterer) FilterTransferBatchMultiple(opts *bind.FilterOpts, operator []common.Address) (*RegistryExtendedTransferBatchMultipleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _RegistryExtended.contract.FilterLogs(opts, "TransferBatchMultiple", operatorRule)
	if err != nil {
		return nil, err
	}
	return &RegistryExtendedTransferBatchMultipleIterator{contract: _RegistryExtended.contract, event: "TransferBatchMultiple", logs: logs, sub: sub}, nil
}

// WatchTransferBatchMultiple is a free log subscription operation binding the contract event 0x9a17c5980bc0d14e313aaa844f04cd0ee291f743df00bf06337a3ce1db563be4.
//
// Solidity: event TransferBatchMultiple(address indexed operator, address[] from, address[] to, uint256[] ids, uint256[] values)
func (_RegistryExtended *RegistryExtendedFilterer) WatchTransferBatchMultiple(opts *bind.WatchOpts, sink chan<- *RegistryExtendedTransferBatchMultiple, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _RegistryExtended.contract.WatchLogs(opts, "TransferBatchMultiple", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryExtendedTransferBatchMultiple)
				if err := _RegistryExtended.contract.UnpackLog(event, "TransferBatchMultiple", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatchMultiple is a log parse operation binding the contract event 0x9a17c5980bc0d14e313aaa844f04cd0ee291f743df00bf06337a3ce1db563be4.
//
// Solidity: event TransferBatchMultiple(address indexed operator, address[] from, address[] to, uint256[] ids, uint256[] values)
func (_RegistryExtended *RegistryExtendedFilterer) ParseTransferBatchMultiple(log types.Log) (*RegistryExtendedTransferBatchMultiple, error) {
	event := new(RegistryExtendedTransferBatchMultiple)
	if err := _RegistryExtended.contract.UnpackLog(event, "TransferBatchMultiple", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryExtendedTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the RegistryExtended contract.
type RegistryExtendedTransferSingleIterator struct {
	Event *RegistryExtendedTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryExtendedTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryExtendedTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryExtendedTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryExtendedTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryExtendedTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryExtendedTransferSingle represents a TransferSingle event raised by the RegistryExtended contract.
type RegistryExtendedTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_RegistryExtended *RegistryExtendedFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*RegistryExtendedTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _RegistryExtended.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &RegistryExtendedTransferSingleIterator{contract: _RegistryExtended.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_RegistryExtended *RegistryExtendedFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *RegistryExtendedTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _RegistryExtended.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryExtendedTransferSingle)
				if err := _RegistryExtended.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_RegistryExtended *RegistryExtendedFilterer) ParseTransferSingle(log types.Log) (*RegistryExtendedTransferSingle, error) {
	event := new(RegistryExtendedTransferSingle)
	if err := _RegistryExtended.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// RegistryExtendedURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the RegistryExtended contract.
type RegistryExtendedURIIterator struct {
	Event *RegistryExtendedURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *RegistryExtendedURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(RegistryExtendedURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(RegistryExtendedURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *RegistryExtendedURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *RegistryExtendedURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// RegistryExtendedURI represents a URI event raised by the RegistryExtended contract.
type RegistryExtendedURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_RegistryExtended *RegistryExtendedFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*RegistryExtendedURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RegistryExtended.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &RegistryExtendedURIIterator{contract: _RegistryExtended.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_RegistryExtended *RegistryExtendedFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *RegistryExtendedURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _RegistryExtended.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(RegistryExtendedURI)
				if err := _RegistryExtended.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_RegistryExtended *RegistryExtendedFilterer) ParseURI(log types.Log) (*RegistryExtendedURI, error) {
	event := new(RegistryExtendedURI)
	if err := _RegistryExtended.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
