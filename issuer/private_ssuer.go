// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package issuer

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// PrivateIssuerPrivateTransferRequest is an auto generated low-level Go binding around an user-defined struct.
type PrivateIssuerPrivateTransferRequest struct {
	Owner common.Address
	Hash  [32]byte
}

// PrivateIssuerProof is an auto generated low-level Go binding around an user-defined struct.
type PrivateIssuerProof struct {
	Left bool
	Hash [32]byte
}

// PrivateIssuerRequestStateChange is an auto generated low-level Go binding around an user-defined struct.
type PrivateIssuerRequestStateChange struct {
	Owner         common.Address
	CertificateId *big.Int
	Hash          [32]byte
	Approved      bool
}

// PrivateIssuerABI is the input ABI used to generate the binding from.
const PrivateIssuerABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"CertificateMigratedToPublic\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"CommitmentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"MigrateToPublicRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"}],\"name\":\"PrivateCertificationRequestApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"}],\"name\":\"PrivateTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"contractIssuer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"}],\"name\":\"getCertificateCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"approveCertificationRequestPrivate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"issuePrivate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ownerAddressLeafHash\",\"type\":\"bytes32\"}],\"name\":\"requestPrivateTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"left\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"structPrivateIssuer.Proof[]\",\"name\":\"_proof\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32\",\"name\":\"_previousCommitment\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_commitment\",\"type\":\"bytes32\"}],\"name\":\"approvePrivateTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ownerAddressLeafHash\",\"type\":\"bytes32\"}],\"name\":\"requestMigrateToPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_migrationRequestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_ownerAddressLeafHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_forAddress\",\"type\":\"address\"}],\"name\":\"requestMigrateToPublicFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_migrationRequestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"}],\"name\":\"getPrivateTransferRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"structPrivateIssuer.PrivateTransferRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getMigrationRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"internalType\":\"structPrivateIssuer.RequestStateChange\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"}],\"name\":\"getMigrationRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_migrationRequestId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_volume\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_salt\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"left\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"internalType\":\"structPrivateIssuer.Proof[]\",\"name\":\"_proof\",\"type\":\"tuple[]\"}],\"name\":\"migrateToPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIssuerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// PrivateIssuerBin is the compiled bytecode used for deploying new contracts.
var PrivateIssuerBin = "0x608060405234801561001057600080fd5b5061419d806100206000396000f3fe60806040526004361061012a5760003560e01c80637b103999116100ab578063abba27b51161006f578063abba27b51461040d578063b747c9111461044a578063c13cbb6314610473578063c45029221461049c578063c4d66de8146104d9578063f2fde38b146105025761012a565b80637b103999146103005780637dbca0061461032b5780638da5cb5b146103685780639317058614610393578063a8551fd3146103d05761012a565b80633659cfe6116100f25780633659cfe61461023c5780634f1ef2861461026557806354fd4d5014610281578063715018a6146102ac578063750e247b146102c35761012a565b80631927b6a51461012f5780631d1438481461016c57806326eb2fd1146101975780633163e28a146101d457806332e71ead14610211575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190612f1f565b61052b565b60405161016391906139c0565b60405180910390f35b34801561017857600080fd5b50610181610659565b60405161018e919061372d565b60405180910390f35b3480156101a357600080fd5b506101be60048036038101906101b99190612f1f565b61067f565b6040516101cb91906139db565b60405180910390f35b3480156101e057600080fd5b506101fb60048036038101906101f69190612dde565b610795565b60405161020891906139db565b60405180910390f35b34801561021d57600080fd5b5061022661094a565b60405161023391906136ac565b60405180910390f35b34801561024857600080fd5b50610263600480360381019061025e9190612d84565b610974565b005b61027f600480360381019061027a9190612e4d565b61099b565b005b34801561028d57600080fd5b506102966109b4565b6040516102a39190613763565b60405180910390f35b3480156102b857600080fd5b506102c16109f1565b005b3480156102cf57600080fd5b506102ea60048036038101906102e59190612f1f565b610a79565b6040516102f791906136e2565b60405180910390f35b34801561030c57600080fd5b50610315610a96565b6040516103229190613748565b60405180910390f35b34801561033757600080fd5b50610352600480360381019061034d9190613041565b610abc565b60405161035f91906139db565b60405180910390f35b34801561037457600080fd5b5061037d610b4e565b60405161038a91906136ac565b60405180910390f35b34801561039f57600080fd5b506103ba60048036038101906103b59190612f79565b610b78565b6040516103c791906136c7565b60405180910390f35b3480156103dc57600080fd5b506103f760048036038101906103f29190612f1f565b610df5565b60405161040491906139a5565b60405180910390f35b34801561041957600080fd5b50610434600480360381019061042f9190613001565b610efe565b60405161044191906139db565b60405180910390f35b34801561045657600080fd5b50610471600480360381019061046c9190613001565b610f1a565b005b34801561047f57600080fd5b5061049a60048036038101906104959190613094565b6110ad565b005b3480156104a857600080fd5b506104c360048036038101906104be9190613001565b611553565b6040516104d091906139db565b60405180910390f35b3480156104e557600080fd5b5061050060048036038101906104fb9190612d84565b61179b565b005b34801561050e57600080fd5b5061052960048036038101906105249190612d84565b611a16565b005b6105336129f7565b61053b611b0e565b73ffffffffffffffffffffffffffffffffffffffff16610559610b4e565b73ffffffffffffffffffffffffffffffffffffffff16146105af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a690613885565b60405180910390fd5b60cb60008381526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050919050565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610689611b0e565b73ffffffffffffffffffffffffffffffffffffffff166106a7610b4e565b73ffffffffffffffffffffffffffffffffffffffff16146106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f490613885565b60405180910390fd5b600080600190505b60cf54811161074d578360cb600083815260200190815260200160002060010154141561073a57600191508092505050610790565b808061074590613c19565b915050610705565b508061078e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610785906137e5565b60405180910390fd5b505b919050565b600061079f611b0e565b73ffffffffffffffffffffffffffffffffffffffff166107bd610b4e565b73ffffffffffffffffffffffffffffffffffffffff1614610813576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080a90613885565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087a906138c5565b60405180910390fd5b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320f2637d84876040518363ffffffff1660e01b81526004016108e29291906136fd565b602060405180830381600087803b1580156108fc57600080fd5b505af1158015610910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109349190612f4c565b90506109408185611553565b9150509392505050565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61097d81611b16565b61099881604051806020016040528060008152506000611b95565b50565b6109a482611b16565b6109b082826001611b95565b5050565b60606040518060400160405280600481526020017f76302e3100000000000000000000000000000000000000000000000000000000815250905090565b6109f9611b0e565b73ffffffffffffffffffffffffffffffffffffffff16610a17610b4e565b73ffffffffffffffffffffffffffffffffffffffff1614610a6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6490613885565b60405180910390fd5b610a776000611d66565b565b600060ce6000838152602001908152602001600020549050919050565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610ac6611b0e565b73ffffffffffffffffffffffffffffffffffffffff16610ae4610b4e565b73ffffffffffffffffffffffffffffffffffffffff1614610b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3190613885565b60405180910390fd5b610b45848484611e2c565b90509392505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610b82611b0e565b73ffffffffffffffffffffffffffffffffffffffff16610ba0610b4e565b73ffffffffffffffffffffffffffffffffffffffff1614610bf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bed90613885565b60405180910390fd5b600060cc60008881526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9890613905565b60405180910390fd5b610d068160010154848888808060200260200160405190810160405280939291908181526020016000905b82821015610cfc57848483905060400201803603810190610ced9190612ef2565b81526020019060010190610ccc565b5050505050611faf565b610d45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3c90613825565b60405180910390fd5b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681525060cc600089815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155905050610de7878585612070565b600191505095945050505050565b610dfd612a3a565b610e05611b0e565b73ffffffffffffffffffffffffffffffffffffffff16610e23610b4e565b73ffffffffffffffffffffffffffffffffffffffff1614610e79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7090613885565b60405180910390fd5b60cc60008381526020019081526020016000206040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050919050565b6000610f128383610f0d611b0e565b611e2c565b905092915050565b600060cc60008481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610fc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbb90613925565b60405180910390fd5b6040518060400160405280610fd7611b0e565b73ffffffffffffffffffffffffffffffffffffffff1681526020018381525060cc600085815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015590505082611066611b0e565b73ffffffffffffffffffffffffffffffffffffffff167fde442453a4fabb4e6fe9cd90c427b54511e2e7712b8dfe60307a8de6209db0f160405160405180910390a3505050565b6110b5611b0e565b73ffffffffffffffffffffffffffffffffffffffff166110d3610b4e565b73ffffffffffffffffffffffffffffffffffffffff1614611129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112090613885565b60405180910390fd5b600060cb600088815260200190815260200160002090508060030160009054906101000a900460ff1615611192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118990613985565b60405180910390fd5b60cd60008260010154815260200190815260200160002060009054906101000a900460ff16156111f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ee906138e5565b60405180910390fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686868660405160200161123294939291906135f5565b6040516020818303038152906040528051906020012081600201541461128d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128490613805565b60405180910390fd5b61136f8160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505060ce600086600101548152602001908152602001600020548787808060200260200160405190810160405280939291908181526020016000905b82821015611365578484839050604002018036038101906113569190612ef2565b81526020019060010190611335565b5050505050612138565b6113ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a590613945565b60405180910390fd5b60018160030160006101000a81548160ff02191690831515021790555060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663836a104082600101548360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16896040518463ffffffff1660e01b8152600401611452939291906139f6565b600060405180830381600087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b50505050600160cd60008360010154815260200190815260200160002060006101000a81548160ff0219169083151502179055506114dd816001015460ce600084600101548152602001908152602001600020546000801b612070565b858160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1682600101547f5d348ef3cec3f8493cd139d1ee84e4c84f5b987f49646d7dfa226dbe98b770c960405160405180910390a450505050505050565b600061155d611b0e565b73ffffffffffffffffffffffffffffffffffffffff1661157b610b4e565b73ffffffffffffffffffffffffffffffffffffffff16146115d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c890613885565b60405180910390fd5b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e3e47cb68560006040518363ffffffff1660e01b8152600401611631929190613a2d565b602060405180830381600087803b15801561164b57600080fd5b505af115801561165f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116839190612f4c565b9050611693816000801b85612070565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633db57170866040518263ffffffff1660e01b81526004016116f091906139db565b60006040518083038186803b15801561170857600080fd5b505afa15801561171c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906117459190612ea9565b90508185826000015173ffffffffffffffffffffffffffffffffffffffff167f382c89c3e15b040e673bdec044eba907f4e9af06293e0058163ca396cecb39ff60405160405180910390a4819250505092915050565b600060019054906101000a900460ff16806117c1575060008054906101000a900460ff16155b611800576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f790613845565b60405180910390fd5b60008060019054906101000a900460ff161590508015611850576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156118c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b7906138c5565b60405180910390fd5b8160c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f21de1e86040518163ffffffff1660e01b815260040160206040518083038186803b15801561196957600080fd5b505afa15801561197d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a19190612db1565b60ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506119e961217f565b6119f1612268565b8015611a125760008060016101000a81548160ff0219169083151502179055505b5050565b611a1e611b0e565b73ffffffffffffffffffffffffffffffffffffffff16611a3c610b4e565b73ffffffffffffffffffffffffffffffffffffffff1614611a92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8990613885565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af9906137c5565b60405180910390fd5b611b0b81611d66565b50565b600033905090565b611b1e611b0e565b73ffffffffffffffffffffffffffffffffffffffff16611b3c610b4e565b73ffffffffffffffffffffffffffffffffffffffff1614611b92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8990613885565b60405180910390fd5b50565b6000611b9f612351565b9050611baa846123a8565b600083511180611bb75750815b15611bc857611bc68484612461565b505b6000611bf67f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b612545565b90508060000160009054906101000a900460ff16611d5f5760018160000160006101000a81548160ff021916908315150217905550611cc28583604051602401611c4091906136ac565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612461565b5060008160000160006101000a81548160ff021916908315150217905550611ce8612351565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611d55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4c906137a5565b60405180910390fd5b611d5e8561254f565b5b5050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080611e388561259e565b90508015611e7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7290613965565b60405180910390fd5b600060cf60008154611e8c90613c19565b919050819055905060405180608001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018681526020016000151581525060cb600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550905050808473ffffffffffffffffffffffffffffffffffffffff167fd18a53554a32a70376b6c223bfb0d84fc24caa3c704ef04eaf1b868e74ee8f6a60405160405180910390a380925050509392505050565b60008084905060005b8351811015612062576000848281518110611fd657611fd5613cc9565b5b6020026020010151905080600001511561201e57806020015183604051602001612001929190613669565b60405160208183030381529060405280519060200120925061204e565b828160200151604051602001612035929190613669565b6040516020818303038152906040528051906020012092505b50808061205a90613c19565b915050611fb8565b508084149150509392505050565b8160ce600085815260200190815260200160002054146120c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120bc90613785565b60405180910390fd5b8060ce600085815260200190815260200160002081905550826120e6611b0e565b73ffffffffffffffffffffffffffffffffffffffff167f20c9608d29cbc79a883dcda48c0f0a9f1babeccea0680f65ef20ce17b06dad158360405161212b91906136e2565b60405180910390a3505050565b60008086868660405160200161215093929190613630565b604051602081830303815290604052805190602001209050612173818585611faf565b91505095945050505050565b600060019054906101000a900460ff16806121a5575060008054906101000a900460ff16155b6121e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121db90613845565b60405180910390fd5b60008060019054906101000a900460ff161590508015612234576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61223c6125ff565b6122446126d8565b80156122655760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff168061228e575060008054906101000a900460ff16155b6122cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c490613845565b60405180910390fd5b60008060019054906101000a900460ff16159050801561231d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6123256127c1565b61232d61289a565b801561234e5760008060016101000a81548160ff0219169083151502179055505b50565b600061237f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612973565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6123b18161297d565b6123f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123e790613865565b60405180910390fd5b8061241d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b612973565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061246c8361297d565b6124ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a2906138a5565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516124d39190613695565b600060405180830381855af49150503d806000811461250e576040519150601f19603f3d011682016040523d82523d6000602084013e612513565b606091505b509150915061253b828260405180606001604052806027815260200161414160279139612990565b9250505092915050565b6000819050919050565b612558816123a8565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600080600090506000600190505b60cf5481116125f4578360cb60008381526020019081526020016000206001015414156125e1576001915081925050506125fa565b80806125ec90613c19565b9150506125ac565b50809150505b919050565b600060019054906101000a900460ff1680612625575060008054906101000a900460ff16155b612664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265b90613845565b60405180910390fd5b60008060019054906101000a900460ff1615905080156126b4576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156126d55760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806126fe575060008054906101000a900460ff16155b61273d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273490613845565b60405180910390fd5b60008060019054906101000a900460ff16159050801561278d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61279d612798611b0e565b611d66565b80156127be5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806127e7575060008054906101000a900460ff16155b612826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281d90613845565b60405180910390fd5b60008060019054906101000a900460ff161590508015612876576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156128975760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806128c0575060008054906101000a900460ff16155b6128ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128f690613845565b60405180910390fd5b60008060019054906101000a900460ff16159050801561294f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156129705760008060016101000a81548160ff0219169083151502179055505b50565b6000819050919050565b600080823b905060008111915050919050565b606083156129a0578290506129f0565b6000835111156129b35782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129e79190613763565b60405180910390fd5b9392505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600080191681526020016000151581525090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681525090565b6000612a80612a7b84613a7b565b613a56565b905082815260208101848484011115612a9c57612a9b613d40565b5b612aa7848285613ba6565b509392505050565b6000612ac2612abd84613a7b565b613a56565b905082815260208101848484011115612ade57612add613d40565b5b612ae9848285613bb5565b509392505050565b600081359050612b00816140e4565b92915050565b600081519050612b15816140e4565b92915050565b60008083601f840112612b3157612b30613d2c565b5b8235905067ffffffffffffffff811115612b4e57612b4d613d27565b5b602083019150836040820283011115612b6a57612b69613d3b565b5b9250929050565b600081359050612b80816140fb565b92915050565b600081519050612b95816140fb565b92915050565b600081359050612baa81614112565b92915050565b600082601f830112612bc557612bc4613d2c565b5b8135612bd5848260208601612a6d565b91505092915050565b600082601f830112612bf357612bf2613d2c565b5b8151612c03848260208601612aaf565b91505092915050565b60008083601f840112612c2257612c21613d2c565b5b8235905067ffffffffffffffff811115612c3f57612c3e613d27565b5b602083019150836001820283011115612c5b57612c5a613d3b565b5b9250929050565b600060a08284031215612c7857612c77613d31565b5b612c8260a0613a56565b90506000612c9284828501612b06565b600083015250602082015167ffffffffffffffff811115612cb657612cb5613d36565b5b612cc284828501612bde565b6020830152506040612cd684828501612b86565b6040830152506060612cea84828501612b86565b6060830152506080612cfe84828501612b06565b60808301525092915050565b600060408284031215612d2057612d1f613d31565b5b612d2a6040613a56565b90506000612d3a84828501612b71565b6000830152506020612d4e84828501612b9b565b60208301525092915050565b600081359050612d6981614129565b92915050565b600081519050612d7e81614129565b92915050565b600060208284031215612d9a57612d99613d4a565b5b6000612da884828501612af1565b91505092915050565b600060208284031215612dc757612dc6613d4a565b5b6000612dd584828501612b06565b91505092915050565b600080600060608486031215612df757612df6613d4a565b5b6000612e0586828701612af1565b9350506020612e1686828701612b9b565b925050604084013567ffffffffffffffff811115612e3757612e36613d45565b5b612e4386828701612bb0565b9150509250925092565b60008060408385031215612e6457612e63613d4a565b5b6000612e7285828601612af1565b925050602083013567ffffffffffffffff811115612e9357612e92613d45565b5b612e9f85828601612bb0565b9150509250929050565b600060208284031215612ebf57612ebe613d4a565b5b600082015167ffffffffffffffff811115612edd57612edc613d45565b5b612ee984828501612c62565b91505092915050565b600060408284031215612f0857612f07613d4a565b5b6000612f1684828501612d0a565b91505092915050565b600060208284031215612f3557612f34613d4a565b5b6000612f4384828501612d5a565b91505092915050565b600060208284031215612f6257612f61613d4a565b5b6000612f7084828501612d6f565b91505092915050565b600080600080600060808688031215612f9557612f94613d4a565b5b6000612fa388828901612d5a565b955050602086013567ffffffffffffffff811115612fc457612fc3613d45565b5b612fd088828901612b1b565b94509450506040612fe388828901612b9b565b9250506060612ff488828901612b9b565b9150509295509295909350565b6000806040838503121561301857613017613d4a565b5b600061302685828601612d5a565b925050602061303785828601612b9b565b9150509250929050565b60008060006060848603121561305a57613059613d4a565b5b600061306886828701612d5a565b935050602061307986828701612b9b565b925050604061308a86828701612af1565b9150509250925092565b600080600080600080608087890312156130b1576130b0613d4a565b5b60006130bf89828a01612d5a565b96505060206130d089828a01612d5a565b955050604087013567ffffffffffffffff8111156130f1576130f0613d45565b5b6130fd89828a01612c0c565b9450945050606087013567ffffffffffffffff8111156131205761311f613d45565b5b61312c89828a01612b1b565b92509250509295509295509295565b61314481613afa565b82525050565b61315381613afa565b82525050565b61316a61316582613afa565b613c62565b82525050565b61317981613b0c565b82525050565b61318881613b0c565b82525050565b61319781613b18565b82525050565b6131a681613b18565b82525050565b6131bd6131b882613b18565b613c74565b82525050565b60006131ce82613aac565b6131d88185613ac2565b93506131e8818560208601613bb5565b6131f181613d4f565b840191505092915050565b600061320782613aac565b6132118185613ad3565b9350613221818560208601613bb5565b80840191505092915050565b61323681613b4c565b82525050565b61324581613b70565b82525050565b61325481613b94565b82525050565b60006132668385613aef565b9350613273838584613ba6565b82840190509392505050565b600061328a82613ab7565b6132948185613ade565b93506132a4818560208601613bb5565b6132ad81613d4f565b840191505092915050565b60006132c382613ab7565b6132cd8185613aef565b93506132dd818560208601613bb5565b80840191505092915050565b60006132f6601b83613ade565b915061330182613d6d565b602082019050919050565b6000613319602f83613ade565b915061332482613d96565b604082019050919050565b600061333c602683613ade565b915061334782613de5565b604082019050919050565b600061335f602083613ade565b915061336a82613e34565b602082019050919050565b6000613382601d83613ade565b915061338d82613e5d565b602082019050919050565b60006133a5601383613ade565b91506133b082613e86565b602082019050919050565b60006133c8602e83613ade565b91506133d382613eaf565b604082019050919050565b60006133eb602d83613ade565b91506133f682613efe565b604082019050919050565b600061340e602083613ade565b915061341982613f4d565b602082019050919050565b6000613431602683613ade565b915061343c82613f76565b604082019050919050565b6000613454601683613ade565b915061345f82613fc5565b602082019050919050565b6000613477601c83613ade565b915061348282613fee565b602082019050919050565b600061349a601d83613ade565b91506134a582614017565b602082019050919050565b60006134bd601e83613ade565b91506134c882614040565b602082019050919050565b60006134e0600d83613ade565b91506134eb82614069565b602082019050919050565b6000613503602083613ade565b915061350e82614092565b602082019050919050565b6000613526601883613ade565b9150613531826140bb565b602082019050919050565b604082016000820151613552600085018261313b565b506020820151613565602085018261318e565b50505050565b608082016000820151613581600085018261313b565b50602082015161359460208501826135c0565b5060408201516135a7604085018261318e565b5060608201516135ba6060850182613170565b50505050565b6135c981613b42565b82525050565b6135d881613b42565b82525050565b6135ef6135ea82613b42565b613c90565b82525050565b60006136018287613159565b60148201915061361182866135de565b60208201915061362282848661325a565b915081905095945050505050565b600061363c8286613159565b60148201915061364c82856135de565b60208201915061365c82846132b8565b9150819050949350505050565b600061367582856131ac565b60208201915061368582846131ac565b6020820191508190509392505050565b60006136a182846131fc565b915081905092915050565b60006020820190506136c1600083018461314a565b92915050565b60006020820190506136dc600083018461317f565b92915050565b60006020820190506136f7600083018461319d565b92915050565b6000604082019050818103600083015261371781856131c3565b9050613726602083018461314a565b9392505050565b6000602082019050613742600083018461322d565b92915050565b600060208201905061375d600083018461323c565b92915050565b6000602082019050818103600083015261377d818461327f565b905092915050565b6000602082019050818103600083015261379e816132e9565b9050919050565b600060208201905081810360008301526137be8161330c565b9050919050565b600060208201905081810360008301526137de8161332f565b9050919050565b600060208201905081810360008301526137fe81613352565b9050919050565b6000602082019050818103600083015261381e81613375565b9050919050565b6000602082019050818103600083015261383e81613398565b9050919050565b6000602082019050818103600083015261385e816133bb565b9050919050565b6000602082019050818103600083015261387e816133de565b9050919050565b6000602082019050818103600083015261389e81613401565b9050919050565b600060208201905081810360008301526138be81613424565b9050919050565b600060208201905081810360008301526138de81613447565b9050919050565b600060208201905081810360008301526138fe8161346a565b9050919050565b6000602082019050818103600083015261391e8161348d565b9050919050565b6000602082019050818103600083015261393e816134b0565b9050919050565b6000602082019050818103600083015261395e816134d3565b9050919050565b6000602082019050818103600083015261397e816134f6565b9050919050565b6000602082019050818103600083015261399e81613519565b9050919050565b60006040820190506139ba600083018461353c565b92915050565b60006080820190506139d5600083018461356b565b92915050565b60006020820190506139f060008301846135cf565b92915050565b6000606082019050613a0b60008301866135cf565b613a18602083018561314a565b613a2560408301846135cf565b949350505050565b6000604082019050613a4260008301856135cf565b613a4f602083018461324b565b9392505050565b6000613a60613a71565b9050613a6c8282613be8565b919050565b6000604051905090565b600067ffffffffffffffff821115613a9657613a95613cf8565b5b613a9f82613d4f565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000613b0582613b22565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613b5782613b5e565b9050919050565b6000613b6982613b22565b9050919050565b6000613b7b82613b82565b9050919050565b6000613b8d82613b22565b9050919050565b6000613b9f82613b42565b9050919050565b82818337600083830152505050565b60005b83811015613bd3578082015181840152602081019050613bb8565b83811115613be2576000848401525b50505050565b613bf182613d4f565b810181811067ffffffffffffffff82111715613c1057613c0f613cf8565b5b80604052505050565b6000613c2482613b42565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613c5757613c56613c9a565b5b600182019050919050565b6000613c6d82613c7e565b9050919050565b6000819050919050565b6000613c8982613d60565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f50726576696f757320636f6d6d69746d656e7420696e76616c69640000000000600082015250565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f756e61626c6520746f2066696e64206d6967726174696f6e2072657175657374600082015250565b7f526571756573746564206861736820646f6573206e6f74206d61746368000000600082015250565b7f496e76616c6964206d65726b6c65207472656500000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b7f43616e6e6f742075736520616464726573732030783000000000000000000000600082015250565b7f436572746966696361746520616c7265616479206d6967726174656400000000600082015250565b7f4e6f6e2d6578697374696e672070726976617465207472616e73666572000000600082015250565b7f4f6e652070726976617465207472616e7366657220617420612074696d650000600082015250565b7f496e76616c69642070726f6f6600000000000000000000000000000000000000600082015250565b7f4d6967726174696f6e207265717565737420616c726561647920657869737473600082015250565b7f5265717565737420616c726561647920617070726f7665640000000000000000600082015250565b6140ed81613afa565b81146140f857600080fd5b50565b61410481613b0c565b811461410f57600080fd5b50565b61411b81613b18565b811461412657600080fd5b50565b61413281613b42565b811461413d57600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122087798ed0213e6cba6717d0a17f9284b39f73ee4535c9295f0db185ad0bd20a7364736f6c63430008060033"

// DeployPrivateIssuer deploys a new Ethereum contract, binding an instance of PrivateIssuer to it.
func DeployPrivateIssuer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *PrivateIssuer, error) {
	parsed, err := abi.JSON(strings.NewReader(PrivateIssuerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PrivateIssuerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PrivateIssuer{PrivateIssuerCaller: PrivateIssuerCaller{contract: contract}, PrivateIssuerTransactor: PrivateIssuerTransactor{contract: contract}, PrivateIssuerFilterer: PrivateIssuerFilterer{contract: contract}}, nil
}

// PrivateIssuer is an auto generated Go binding around an Ethereum contract.
type PrivateIssuer struct {
	PrivateIssuerCaller     // Read-only binding to the contract
	PrivateIssuerTransactor // Write-only binding to the contract
	PrivateIssuerFilterer   // Log filterer for contract events
}

// PrivateIssuerCaller is an auto generated read-only Go binding around an Ethereum contract.
type PrivateIssuerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrivateIssuerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PrivateIssuerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrivateIssuerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PrivateIssuerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PrivateIssuerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PrivateIssuerSession struct {
	Contract     *PrivateIssuer    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PrivateIssuerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PrivateIssuerCallerSession struct {
	Contract *PrivateIssuerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// PrivateIssuerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PrivateIssuerTransactorSession struct {
	Contract     *PrivateIssuerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// PrivateIssuerRaw is an auto generated low-level Go binding around an Ethereum contract.
type PrivateIssuerRaw struct {
	Contract *PrivateIssuer // Generic contract binding to access the raw methods on
}

// PrivateIssuerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PrivateIssuerCallerRaw struct {
	Contract *PrivateIssuerCaller // Generic read-only contract binding to access the raw methods on
}

// PrivateIssuerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PrivateIssuerTransactorRaw struct {
	Contract *PrivateIssuerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPrivateIssuer creates a new instance of PrivateIssuer, bound to a specific deployed contract.
func NewPrivateIssuer(address common.Address, backend bind.ContractBackend) (*PrivateIssuer, error) {
	contract, err := bindPrivateIssuer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PrivateIssuer{PrivateIssuerCaller: PrivateIssuerCaller{contract: contract}, PrivateIssuerTransactor: PrivateIssuerTransactor{contract: contract}, PrivateIssuerFilterer: PrivateIssuerFilterer{contract: contract}}, nil
}

// NewPrivateIssuerCaller creates a new read-only instance of PrivateIssuer, bound to a specific deployed contract.
func NewPrivateIssuerCaller(address common.Address, caller bind.ContractCaller) (*PrivateIssuerCaller, error) {
	contract, err := bindPrivateIssuer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PrivateIssuerCaller{contract: contract}, nil
}

// NewPrivateIssuerTransactor creates a new write-only instance of PrivateIssuer, bound to a specific deployed contract.
func NewPrivateIssuerTransactor(address common.Address, transactor bind.ContractTransactor) (*PrivateIssuerTransactor, error) {
	contract, err := bindPrivateIssuer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PrivateIssuerTransactor{contract: contract}, nil
}

// NewPrivateIssuerFilterer creates a new log filterer instance of PrivateIssuer, bound to a specific deployed contract.
func NewPrivateIssuerFilterer(address common.Address, filterer bind.ContractFilterer) (*PrivateIssuerFilterer, error) {
	contract, err := bindPrivateIssuer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PrivateIssuerFilterer{contract: contract}, nil
}

// bindPrivateIssuer binds a generic wrapper to an already deployed contract.
func bindPrivateIssuer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PrivateIssuerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PrivateIssuer *PrivateIssuerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PrivateIssuer.Contract.PrivateIssuerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PrivateIssuer *PrivateIssuerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.PrivateIssuerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PrivateIssuer *PrivateIssuerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.PrivateIssuerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PrivateIssuer *PrivateIssuerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PrivateIssuer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PrivateIssuer *PrivateIssuerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PrivateIssuer *PrivateIssuerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.contract.Transact(opts, method, params...)
}

// GetCertificateCommitment is a free data retrieval call binding the contract method 0x750e247b.
//
// Solidity: function getCertificateCommitment(uint256 certificateId) view returns(bytes32)
func (_PrivateIssuer *PrivateIssuerCaller) GetCertificateCommitment(opts *bind.CallOpts, certificateId *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _PrivateIssuer.contract.Call(opts, &out, "getCertificateCommitment", certificateId)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetCertificateCommitment is a free data retrieval call binding the contract method 0x750e247b.
//
// Solidity: function getCertificateCommitment(uint256 certificateId) view returns(bytes32)
func (_PrivateIssuer *PrivateIssuerSession) GetCertificateCommitment(certificateId *big.Int) ([32]byte, error) {
	return _PrivateIssuer.Contract.GetCertificateCommitment(&_PrivateIssuer.CallOpts, certificateId)
}

// GetCertificateCommitment is a free data retrieval call binding the contract method 0x750e247b.
//
// Solidity: function getCertificateCommitment(uint256 certificateId) view returns(bytes32)
func (_PrivateIssuer *PrivateIssuerCallerSession) GetCertificateCommitment(certificateId *big.Int) ([32]byte, error) {
	return _PrivateIssuer.Contract.GetCertificateCommitment(&_PrivateIssuer.CallOpts, certificateId)
}

// GetIssuerAddress is a free data retrieval call binding the contract method 0x32e71ead.
//
// Solidity: function getIssuerAddress() view returns(address)
func (_PrivateIssuer *PrivateIssuerCaller) GetIssuerAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PrivateIssuer.contract.Call(opts, &out, "getIssuerAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetIssuerAddress is a free data retrieval call binding the contract method 0x32e71ead.
//
// Solidity: function getIssuerAddress() view returns(address)
func (_PrivateIssuer *PrivateIssuerSession) GetIssuerAddress() (common.Address, error) {
	return _PrivateIssuer.Contract.GetIssuerAddress(&_PrivateIssuer.CallOpts)
}

// GetIssuerAddress is a free data retrieval call binding the contract method 0x32e71ead.
//
// Solidity: function getIssuerAddress() view returns(address)
func (_PrivateIssuer *PrivateIssuerCallerSession) GetIssuerAddress() (common.Address, error) {
	return _PrivateIssuer.Contract.GetIssuerAddress(&_PrivateIssuer.CallOpts)
}

// GetMigrationRequest is a free data retrieval call binding the contract method 0x1927b6a5.
//
// Solidity: function getMigrationRequest(uint256 _requestId) view returns((address,uint256,bytes32,bool))
func (_PrivateIssuer *PrivateIssuerCaller) GetMigrationRequest(opts *bind.CallOpts, _requestId *big.Int) (PrivateIssuerRequestStateChange, error) {
	var out []interface{}
	err := _PrivateIssuer.contract.Call(opts, &out, "getMigrationRequest", _requestId)

	if err != nil {
		return *new(PrivateIssuerRequestStateChange), err
	}

	out0 := *abi.ConvertType(out[0], new(PrivateIssuerRequestStateChange)).(*PrivateIssuerRequestStateChange)

	return out0, err

}

// GetMigrationRequest is a free data retrieval call binding the contract method 0x1927b6a5.
//
// Solidity: function getMigrationRequest(uint256 _requestId) view returns((address,uint256,bytes32,bool))
func (_PrivateIssuer *PrivateIssuerSession) GetMigrationRequest(_requestId *big.Int) (PrivateIssuerRequestStateChange, error) {
	return _PrivateIssuer.Contract.GetMigrationRequest(&_PrivateIssuer.CallOpts, _requestId)
}

// GetMigrationRequest is a free data retrieval call binding the contract method 0x1927b6a5.
//
// Solidity: function getMigrationRequest(uint256 _requestId) view returns((address,uint256,bytes32,bool))
func (_PrivateIssuer *PrivateIssuerCallerSession) GetMigrationRequest(_requestId *big.Int) (PrivateIssuerRequestStateChange, error) {
	return _PrivateIssuer.Contract.GetMigrationRequest(&_PrivateIssuer.CallOpts, _requestId)
}

// GetMigrationRequestId is a free data retrieval call binding the contract method 0x26eb2fd1.
//
// Solidity: function getMigrationRequestId(uint256 _certificateId) view returns(uint256 _migrationRequestId)
func (_PrivateIssuer *PrivateIssuerCaller) GetMigrationRequestId(opts *bind.CallOpts, _certificateId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _PrivateIssuer.contract.Call(opts, &out, "getMigrationRequestId", _certificateId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetMigrationRequestId is a free data retrieval call binding the contract method 0x26eb2fd1.
//
// Solidity: function getMigrationRequestId(uint256 _certificateId) view returns(uint256 _migrationRequestId)
func (_PrivateIssuer *PrivateIssuerSession) GetMigrationRequestId(_certificateId *big.Int) (*big.Int, error) {
	return _PrivateIssuer.Contract.GetMigrationRequestId(&_PrivateIssuer.CallOpts, _certificateId)
}

// GetMigrationRequestId is a free data retrieval call binding the contract method 0x26eb2fd1.
//
// Solidity: function getMigrationRequestId(uint256 _certificateId) view returns(uint256 _migrationRequestId)
func (_PrivateIssuer *PrivateIssuerCallerSession) GetMigrationRequestId(_certificateId *big.Int) (*big.Int, error) {
	return _PrivateIssuer.Contract.GetMigrationRequestId(&_PrivateIssuer.CallOpts, _certificateId)
}

// GetPrivateTransferRequest is a free data retrieval call binding the contract method 0xa8551fd3.
//
// Solidity: function getPrivateTransferRequest(uint256 _certificateId) view returns((address,bytes32))
func (_PrivateIssuer *PrivateIssuerCaller) GetPrivateTransferRequest(opts *bind.CallOpts, _certificateId *big.Int) (PrivateIssuerPrivateTransferRequest, error) {
	var out []interface{}
	err := _PrivateIssuer.contract.Call(opts, &out, "getPrivateTransferRequest", _certificateId)

	if err != nil {
		return *new(PrivateIssuerPrivateTransferRequest), err
	}

	out0 := *abi.ConvertType(out[0], new(PrivateIssuerPrivateTransferRequest)).(*PrivateIssuerPrivateTransferRequest)

	return out0, err

}

// GetPrivateTransferRequest is a free data retrieval call binding the contract method 0xa8551fd3.
//
// Solidity: function getPrivateTransferRequest(uint256 _certificateId) view returns((address,bytes32))
func (_PrivateIssuer *PrivateIssuerSession) GetPrivateTransferRequest(_certificateId *big.Int) (PrivateIssuerPrivateTransferRequest, error) {
	return _PrivateIssuer.Contract.GetPrivateTransferRequest(&_PrivateIssuer.CallOpts, _certificateId)
}

// GetPrivateTransferRequest is a free data retrieval call binding the contract method 0xa8551fd3.
//
// Solidity: function getPrivateTransferRequest(uint256 _certificateId) view returns((address,bytes32))
func (_PrivateIssuer *PrivateIssuerCallerSession) GetPrivateTransferRequest(_certificateId *big.Int) (PrivateIssuerPrivateTransferRequest, error) {
	return _PrivateIssuer.Contract.GetPrivateTransferRequest(&_PrivateIssuer.CallOpts, _certificateId)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_PrivateIssuer *PrivateIssuerCaller) Issuer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PrivateIssuer.contract.Call(opts, &out, "issuer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_PrivateIssuer *PrivateIssuerSession) Issuer() (common.Address, error) {
	return _PrivateIssuer.Contract.Issuer(&_PrivateIssuer.CallOpts)
}

// Issuer is a free data retrieval call binding the contract method 0x1d143848.
//
// Solidity: function issuer() view returns(address)
func (_PrivateIssuer *PrivateIssuerCallerSession) Issuer() (common.Address, error) {
	return _PrivateIssuer.Contract.Issuer(&_PrivateIssuer.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PrivateIssuer *PrivateIssuerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PrivateIssuer.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PrivateIssuer *PrivateIssuerSession) Owner() (common.Address, error) {
	return _PrivateIssuer.Contract.Owner(&_PrivateIssuer.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_PrivateIssuer *PrivateIssuerCallerSession) Owner() (common.Address, error) {
	return _PrivateIssuer.Contract.Owner(&_PrivateIssuer.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_PrivateIssuer *PrivateIssuerCaller) Registry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PrivateIssuer.contract.Call(opts, &out, "registry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_PrivateIssuer *PrivateIssuerSession) Registry() (common.Address, error) {
	return _PrivateIssuer.Contract.Registry(&_PrivateIssuer.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_PrivateIssuer *PrivateIssuerCallerSession) Registry() (common.Address, error) {
	return _PrivateIssuer.Contract.Registry(&_PrivateIssuer.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_PrivateIssuer *PrivateIssuerCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _PrivateIssuer.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_PrivateIssuer *PrivateIssuerSession) Version() (string, error) {
	return _PrivateIssuer.Contract.Version(&_PrivateIssuer.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_PrivateIssuer *PrivateIssuerCallerSession) Version() (string, error) {
	return _PrivateIssuer.Contract.Version(&_PrivateIssuer.CallOpts)
}

// ApproveCertificationRequestPrivate is a paid mutator transaction binding the contract method 0xc4502922.
//
// Solidity: function approveCertificationRequestPrivate(uint256 _requestId, bytes32 _commitment) returns(uint256)
func (_PrivateIssuer *PrivateIssuerTransactor) ApproveCertificationRequestPrivate(opts *bind.TransactOpts, _requestId *big.Int, _commitment [32]byte) (*types.Transaction, error) {
	return _PrivateIssuer.contract.Transact(opts, "approveCertificationRequestPrivate", _requestId, _commitment)
}

// ApproveCertificationRequestPrivate is a paid mutator transaction binding the contract method 0xc4502922.
//
// Solidity: function approveCertificationRequestPrivate(uint256 _requestId, bytes32 _commitment) returns(uint256)
func (_PrivateIssuer *PrivateIssuerSession) ApproveCertificationRequestPrivate(_requestId *big.Int, _commitment [32]byte) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.ApproveCertificationRequestPrivate(&_PrivateIssuer.TransactOpts, _requestId, _commitment)
}

// ApproveCertificationRequestPrivate is a paid mutator transaction binding the contract method 0xc4502922.
//
// Solidity: function approveCertificationRequestPrivate(uint256 _requestId, bytes32 _commitment) returns(uint256)
func (_PrivateIssuer *PrivateIssuerTransactorSession) ApproveCertificationRequestPrivate(_requestId *big.Int, _commitment [32]byte) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.ApproveCertificationRequestPrivate(&_PrivateIssuer.TransactOpts, _requestId, _commitment)
}

// ApprovePrivateTransfer is a paid mutator transaction binding the contract method 0x93170586.
//
// Solidity: function approvePrivateTransfer(uint256 _certificateId, (bool,bytes32)[] _proof, bytes32 _previousCommitment, bytes32 _commitment) returns(bool)
func (_PrivateIssuer *PrivateIssuerTransactor) ApprovePrivateTransfer(opts *bind.TransactOpts, _certificateId *big.Int, _proof []PrivateIssuerProof, _previousCommitment [32]byte, _commitment [32]byte) (*types.Transaction, error) {
	return _PrivateIssuer.contract.Transact(opts, "approvePrivateTransfer", _certificateId, _proof, _previousCommitment, _commitment)
}

// ApprovePrivateTransfer is a paid mutator transaction binding the contract method 0x93170586.
//
// Solidity: function approvePrivateTransfer(uint256 _certificateId, (bool,bytes32)[] _proof, bytes32 _previousCommitment, bytes32 _commitment) returns(bool)
func (_PrivateIssuer *PrivateIssuerSession) ApprovePrivateTransfer(_certificateId *big.Int, _proof []PrivateIssuerProof, _previousCommitment [32]byte, _commitment [32]byte) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.ApprovePrivateTransfer(&_PrivateIssuer.TransactOpts, _certificateId, _proof, _previousCommitment, _commitment)
}

// ApprovePrivateTransfer is a paid mutator transaction binding the contract method 0x93170586.
//
// Solidity: function approvePrivateTransfer(uint256 _certificateId, (bool,bytes32)[] _proof, bytes32 _previousCommitment, bytes32 _commitment) returns(bool)
func (_PrivateIssuer *PrivateIssuerTransactorSession) ApprovePrivateTransfer(_certificateId *big.Int, _proof []PrivateIssuerProof, _previousCommitment [32]byte, _commitment [32]byte) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.ApprovePrivateTransfer(&_PrivateIssuer.TransactOpts, _certificateId, _proof, _previousCommitment, _commitment)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _issuer) returns()
func (_PrivateIssuer *PrivateIssuerTransactor) Initialize(opts *bind.TransactOpts, _issuer common.Address) (*types.Transaction, error) {
	return _PrivateIssuer.contract.Transact(opts, "initialize", _issuer)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _issuer) returns()
func (_PrivateIssuer *PrivateIssuerSession) Initialize(_issuer common.Address) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.Initialize(&_PrivateIssuer.TransactOpts, _issuer)
}

// Initialize is a paid mutator transaction binding the contract method 0xc4d66de8.
//
// Solidity: function initialize(address _issuer) returns()
func (_PrivateIssuer *PrivateIssuerTransactorSession) Initialize(_issuer common.Address) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.Initialize(&_PrivateIssuer.TransactOpts, _issuer)
}

// IssuePrivate is a paid mutator transaction binding the contract method 0x3163e28a.
//
// Solidity: function issuePrivate(address _to, bytes32 _commitment, bytes _data) returns(uint256)
func (_PrivateIssuer *PrivateIssuerTransactor) IssuePrivate(opts *bind.TransactOpts, _to common.Address, _commitment [32]byte, _data []byte) (*types.Transaction, error) {
	return _PrivateIssuer.contract.Transact(opts, "issuePrivate", _to, _commitment, _data)
}

// IssuePrivate is a paid mutator transaction binding the contract method 0x3163e28a.
//
// Solidity: function issuePrivate(address _to, bytes32 _commitment, bytes _data) returns(uint256)
func (_PrivateIssuer *PrivateIssuerSession) IssuePrivate(_to common.Address, _commitment [32]byte, _data []byte) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.IssuePrivate(&_PrivateIssuer.TransactOpts, _to, _commitment, _data)
}

// IssuePrivate is a paid mutator transaction binding the contract method 0x3163e28a.
//
// Solidity: function issuePrivate(address _to, bytes32 _commitment, bytes _data) returns(uint256)
func (_PrivateIssuer *PrivateIssuerTransactorSession) IssuePrivate(_to common.Address, _commitment [32]byte, _data []byte) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.IssuePrivate(&_PrivateIssuer.TransactOpts, _to, _commitment, _data)
}

// MigrateToPublic is a paid mutator transaction binding the contract method 0xc13cbb63.
//
// Solidity: function migrateToPublic(uint256 _requestId, uint256 _volume, string _salt, (bool,bytes32)[] _proof) returns()
func (_PrivateIssuer *PrivateIssuerTransactor) MigrateToPublic(opts *bind.TransactOpts, _requestId *big.Int, _volume *big.Int, _salt string, _proof []PrivateIssuerProof) (*types.Transaction, error) {
	return _PrivateIssuer.contract.Transact(opts, "migrateToPublic", _requestId, _volume, _salt, _proof)
}

// MigrateToPublic is a paid mutator transaction binding the contract method 0xc13cbb63.
//
// Solidity: function migrateToPublic(uint256 _requestId, uint256 _volume, string _salt, (bool,bytes32)[] _proof) returns()
func (_PrivateIssuer *PrivateIssuerSession) MigrateToPublic(_requestId *big.Int, _volume *big.Int, _salt string, _proof []PrivateIssuerProof) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.MigrateToPublic(&_PrivateIssuer.TransactOpts, _requestId, _volume, _salt, _proof)
}

// MigrateToPublic is a paid mutator transaction binding the contract method 0xc13cbb63.
//
// Solidity: function migrateToPublic(uint256 _requestId, uint256 _volume, string _salt, (bool,bytes32)[] _proof) returns()
func (_PrivateIssuer *PrivateIssuerTransactorSession) MigrateToPublic(_requestId *big.Int, _volume *big.Int, _salt string, _proof []PrivateIssuerProof) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.MigrateToPublic(&_PrivateIssuer.TransactOpts, _requestId, _volume, _salt, _proof)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PrivateIssuer *PrivateIssuerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PrivateIssuer.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PrivateIssuer *PrivateIssuerSession) RenounceOwnership() (*types.Transaction, error) {
	return _PrivateIssuer.Contract.RenounceOwnership(&_PrivateIssuer.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_PrivateIssuer *PrivateIssuerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _PrivateIssuer.Contract.RenounceOwnership(&_PrivateIssuer.TransactOpts)
}

// RequestMigrateToPublic is a paid mutator transaction binding the contract method 0xabba27b5.
//
// Solidity: function requestMigrateToPublic(uint256 _certificateId, bytes32 _ownerAddressLeafHash) returns(uint256 _migrationRequestId)
func (_PrivateIssuer *PrivateIssuerTransactor) RequestMigrateToPublic(opts *bind.TransactOpts, _certificateId *big.Int, _ownerAddressLeafHash [32]byte) (*types.Transaction, error) {
	return _PrivateIssuer.contract.Transact(opts, "requestMigrateToPublic", _certificateId, _ownerAddressLeafHash)
}

// RequestMigrateToPublic is a paid mutator transaction binding the contract method 0xabba27b5.
//
// Solidity: function requestMigrateToPublic(uint256 _certificateId, bytes32 _ownerAddressLeafHash) returns(uint256 _migrationRequestId)
func (_PrivateIssuer *PrivateIssuerSession) RequestMigrateToPublic(_certificateId *big.Int, _ownerAddressLeafHash [32]byte) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.RequestMigrateToPublic(&_PrivateIssuer.TransactOpts, _certificateId, _ownerAddressLeafHash)
}

// RequestMigrateToPublic is a paid mutator transaction binding the contract method 0xabba27b5.
//
// Solidity: function requestMigrateToPublic(uint256 _certificateId, bytes32 _ownerAddressLeafHash) returns(uint256 _migrationRequestId)
func (_PrivateIssuer *PrivateIssuerTransactorSession) RequestMigrateToPublic(_certificateId *big.Int, _ownerAddressLeafHash [32]byte) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.RequestMigrateToPublic(&_PrivateIssuer.TransactOpts, _certificateId, _ownerAddressLeafHash)
}

// RequestMigrateToPublicFor is a paid mutator transaction binding the contract method 0x7dbca006.
//
// Solidity: function requestMigrateToPublicFor(uint256 _certificateId, bytes32 _ownerAddressLeafHash, address _forAddress) returns(uint256 _migrationRequestId)
func (_PrivateIssuer *PrivateIssuerTransactor) RequestMigrateToPublicFor(opts *bind.TransactOpts, _certificateId *big.Int, _ownerAddressLeafHash [32]byte, _forAddress common.Address) (*types.Transaction, error) {
	return _PrivateIssuer.contract.Transact(opts, "requestMigrateToPublicFor", _certificateId, _ownerAddressLeafHash, _forAddress)
}

// RequestMigrateToPublicFor is a paid mutator transaction binding the contract method 0x7dbca006.
//
// Solidity: function requestMigrateToPublicFor(uint256 _certificateId, bytes32 _ownerAddressLeafHash, address _forAddress) returns(uint256 _migrationRequestId)
func (_PrivateIssuer *PrivateIssuerSession) RequestMigrateToPublicFor(_certificateId *big.Int, _ownerAddressLeafHash [32]byte, _forAddress common.Address) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.RequestMigrateToPublicFor(&_PrivateIssuer.TransactOpts, _certificateId, _ownerAddressLeafHash, _forAddress)
}

// RequestMigrateToPublicFor is a paid mutator transaction binding the contract method 0x7dbca006.
//
// Solidity: function requestMigrateToPublicFor(uint256 _certificateId, bytes32 _ownerAddressLeafHash, address _forAddress) returns(uint256 _migrationRequestId)
func (_PrivateIssuer *PrivateIssuerTransactorSession) RequestMigrateToPublicFor(_certificateId *big.Int, _ownerAddressLeafHash [32]byte, _forAddress common.Address) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.RequestMigrateToPublicFor(&_PrivateIssuer.TransactOpts, _certificateId, _ownerAddressLeafHash, _forAddress)
}

// RequestPrivateTransfer is a paid mutator transaction binding the contract method 0xb747c911.
//
// Solidity: function requestPrivateTransfer(uint256 _certificateId, bytes32 _ownerAddressLeafHash) returns()
func (_PrivateIssuer *PrivateIssuerTransactor) RequestPrivateTransfer(opts *bind.TransactOpts, _certificateId *big.Int, _ownerAddressLeafHash [32]byte) (*types.Transaction, error) {
	return _PrivateIssuer.contract.Transact(opts, "requestPrivateTransfer", _certificateId, _ownerAddressLeafHash)
}

// RequestPrivateTransfer is a paid mutator transaction binding the contract method 0xb747c911.
//
// Solidity: function requestPrivateTransfer(uint256 _certificateId, bytes32 _ownerAddressLeafHash) returns()
func (_PrivateIssuer *PrivateIssuerSession) RequestPrivateTransfer(_certificateId *big.Int, _ownerAddressLeafHash [32]byte) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.RequestPrivateTransfer(&_PrivateIssuer.TransactOpts, _certificateId, _ownerAddressLeafHash)
}

// RequestPrivateTransfer is a paid mutator transaction binding the contract method 0xb747c911.
//
// Solidity: function requestPrivateTransfer(uint256 _certificateId, bytes32 _ownerAddressLeafHash) returns()
func (_PrivateIssuer *PrivateIssuerTransactorSession) RequestPrivateTransfer(_certificateId *big.Int, _ownerAddressLeafHash [32]byte) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.RequestPrivateTransfer(&_PrivateIssuer.TransactOpts, _certificateId, _ownerAddressLeafHash)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PrivateIssuer *PrivateIssuerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _PrivateIssuer.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PrivateIssuer *PrivateIssuerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.TransferOwnership(&_PrivateIssuer.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_PrivateIssuer *PrivateIssuerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.TransferOwnership(&_PrivateIssuer.TransactOpts, newOwner)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_PrivateIssuer *PrivateIssuerTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _PrivateIssuer.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_PrivateIssuer *PrivateIssuerSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.UpgradeTo(&_PrivateIssuer.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_PrivateIssuer *PrivateIssuerTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.UpgradeTo(&_PrivateIssuer.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_PrivateIssuer *PrivateIssuerTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _PrivateIssuer.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_PrivateIssuer *PrivateIssuerSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.UpgradeToAndCall(&_PrivateIssuer.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_PrivateIssuer *PrivateIssuerTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _PrivateIssuer.Contract.UpgradeToAndCall(&_PrivateIssuer.TransactOpts, newImplementation, data)
}

// PrivateIssuerAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the PrivateIssuer contract.
type PrivateIssuerAdminChangedIterator struct {
	Event *PrivateIssuerAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrivateIssuerAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrivateIssuerAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrivateIssuerAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrivateIssuerAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrivateIssuerAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrivateIssuerAdminChanged represents a AdminChanged event raised by the PrivateIssuer contract.
type PrivateIssuerAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_PrivateIssuer *PrivateIssuerFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*PrivateIssuerAdminChangedIterator, error) {

	logs, sub, err := _PrivateIssuer.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &PrivateIssuerAdminChangedIterator{contract: _PrivateIssuer.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_PrivateIssuer *PrivateIssuerFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *PrivateIssuerAdminChanged) (event.Subscription, error) {

	logs, sub, err := _PrivateIssuer.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrivateIssuerAdminChanged)
				if err := _PrivateIssuer.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_PrivateIssuer *PrivateIssuerFilterer) ParseAdminChanged(log types.Log) (*PrivateIssuerAdminChanged, error) {
	event := new(PrivateIssuerAdminChanged)
	if err := _PrivateIssuer.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrivateIssuerBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the PrivateIssuer contract.
type PrivateIssuerBeaconUpgradedIterator struct {
	Event *PrivateIssuerBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrivateIssuerBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrivateIssuerBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrivateIssuerBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrivateIssuerBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrivateIssuerBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrivateIssuerBeaconUpgraded represents a BeaconUpgraded event raised by the PrivateIssuer contract.
type PrivateIssuerBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_PrivateIssuer *PrivateIssuerFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*PrivateIssuerBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _PrivateIssuer.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &PrivateIssuerBeaconUpgradedIterator{contract: _PrivateIssuer.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_PrivateIssuer *PrivateIssuerFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *PrivateIssuerBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _PrivateIssuer.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrivateIssuerBeaconUpgraded)
				if err := _PrivateIssuer.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_PrivateIssuer *PrivateIssuerFilterer) ParseBeaconUpgraded(log types.Log) (*PrivateIssuerBeaconUpgraded, error) {
	event := new(PrivateIssuerBeaconUpgraded)
	if err := _PrivateIssuer.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrivateIssuerCertificateMigratedToPublicIterator is returned from FilterCertificateMigratedToPublic and is used to iterate over the raw logs and unpacked data for CertificateMigratedToPublic events raised by the PrivateIssuer contract.
type PrivateIssuerCertificateMigratedToPublicIterator struct {
	Event *PrivateIssuerCertificateMigratedToPublic // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrivateIssuerCertificateMigratedToPublicIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrivateIssuerCertificateMigratedToPublic)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrivateIssuerCertificateMigratedToPublic)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrivateIssuerCertificateMigratedToPublicIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrivateIssuerCertificateMigratedToPublicIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrivateIssuerCertificateMigratedToPublic represents a CertificateMigratedToPublic event raised by the PrivateIssuer contract.
type PrivateIssuerCertificateMigratedToPublic struct {
	CertificateId *big.Int
	Owner         common.Address
	Amount        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCertificateMigratedToPublic is a free log retrieval operation binding the contract event 0x5d348ef3cec3f8493cd139d1ee84e4c84f5b987f49646d7dfa226dbe98b770c9.
//
// Solidity: event CertificateMigratedToPublic(uint256 indexed _certificateId, address indexed _owner, uint256 indexed _amount)
func (_PrivateIssuer *PrivateIssuerFilterer) FilterCertificateMigratedToPublic(opts *bind.FilterOpts, _certificateId []*big.Int, _owner []common.Address, _amount []*big.Int) (*PrivateIssuerCertificateMigratedToPublicIterator, error) {

	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}
	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _amountRule []interface{}
	for _, _amountItem := range _amount {
		_amountRule = append(_amountRule, _amountItem)
	}

	logs, sub, err := _PrivateIssuer.contract.FilterLogs(opts, "CertificateMigratedToPublic", _certificateIdRule, _ownerRule, _amountRule)
	if err != nil {
		return nil, err
	}
	return &PrivateIssuerCertificateMigratedToPublicIterator{contract: _PrivateIssuer.contract, event: "CertificateMigratedToPublic", logs: logs, sub: sub}, nil
}

// WatchCertificateMigratedToPublic is a free log subscription operation binding the contract event 0x5d348ef3cec3f8493cd139d1ee84e4c84f5b987f49646d7dfa226dbe98b770c9.
//
// Solidity: event CertificateMigratedToPublic(uint256 indexed _certificateId, address indexed _owner, uint256 indexed _amount)
func (_PrivateIssuer *PrivateIssuerFilterer) WatchCertificateMigratedToPublic(opts *bind.WatchOpts, sink chan<- *PrivateIssuerCertificateMigratedToPublic, _certificateId []*big.Int, _owner []common.Address, _amount []*big.Int) (event.Subscription, error) {

	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}
	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _amountRule []interface{}
	for _, _amountItem := range _amount {
		_amountRule = append(_amountRule, _amountItem)
	}

	logs, sub, err := _PrivateIssuer.contract.WatchLogs(opts, "CertificateMigratedToPublic", _certificateIdRule, _ownerRule, _amountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrivateIssuerCertificateMigratedToPublic)
				if err := _PrivateIssuer.contract.UnpackLog(event, "CertificateMigratedToPublic", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificateMigratedToPublic is a log parse operation binding the contract event 0x5d348ef3cec3f8493cd139d1ee84e4c84f5b987f49646d7dfa226dbe98b770c9.
//
// Solidity: event CertificateMigratedToPublic(uint256 indexed _certificateId, address indexed _owner, uint256 indexed _amount)
func (_PrivateIssuer *PrivateIssuerFilterer) ParseCertificateMigratedToPublic(log types.Log) (*PrivateIssuerCertificateMigratedToPublic, error) {
	event := new(PrivateIssuerCertificateMigratedToPublic)
	if err := _PrivateIssuer.contract.UnpackLog(event, "CertificateMigratedToPublic", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrivateIssuerCommitmentUpdatedIterator is returned from FilterCommitmentUpdated and is used to iterate over the raw logs and unpacked data for CommitmentUpdated events raised by the PrivateIssuer contract.
type PrivateIssuerCommitmentUpdatedIterator struct {
	Event *PrivateIssuerCommitmentUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrivateIssuerCommitmentUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrivateIssuerCommitmentUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrivateIssuerCommitmentUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrivateIssuerCommitmentUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrivateIssuerCommitmentUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrivateIssuerCommitmentUpdated represents a CommitmentUpdated event raised by the PrivateIssuer contract.
type PrivateIssuerCommitmentUpdated struct {
	Owner      common.Address
	Id         *big.Int
	Commitment [32]byte
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCommitmentUpdated is a free log retrieval operation binding the contract event 0x20c9608d29cbc79a883dcda48c0f0a9f1babeccea0680f65ef20ce17b06dad15.
//
// Solidity: event CommitmentUpdated(address indexed _owner, uint256 indexed _id, bytes32 _commitment)
func (_PrivateIssuer *PrivateIssuerFilterer) FilterCommitmentUpdated(opts *bind.FilterOpts, _owner []common.Address, _id []*big.Int) (*PrivateIssuerCommitmentUpdatedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _PrivateIssuer.contract.FilterLogs(opts, "CommitmentUpdated", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return &PrivateIssuerCommitmentUpdatedIterator{contract: _PrivateIssuer.contract, event: "CommitmentUpdated", logs: logs, sub: sub}, nil
}

// WatchCommitmentUpdated is a free log subscription operation binding the contract event 0x20c9608d29cbc79a883dcda48c0f0a9f1babeccea0680f65ef20ce17b06dad15.
//
// Solidity: event CommitmentUpdated(address indexed _owner, uint256 indexed _id, bytes32 _commitment)
func (_PrivateIssuer *PrivateIssuerFilterer) WatchCommitmentUpdated(opts *bind.WatchOpts, sink chan<- *PrivateIssuerCommitmentUpdated, _owner []common.Address, _id []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _PrivateIssuer.contract.WatchLogs(opts, "CommitmentUpdated", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrivateIssuerCommitmentUpdated)
				if err := _PrivateIssuer.contract.UnpackLog(event, "CommitmentUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCommitmentUpdated is a log parse operation binding the contract event 0x20c9608d29cbc79a883dcda48c0f0a9f1babeccea0680f65ef20ce17b06dad15.
//
// Solidity: event CommitmentUpdated(address indexed _owner, uint256 indexed _id, bytes32 _commitment)
func (_PrivateIssuer *PrivateIssuerFilterer) ParseCommitmentUpdated(log types.Log) (*PrivateIssuerCommitmentUpdated, error) {
	event := new(PrivateIssuerCommitmentUpdated)
	if err := _PrivateIssuer.contract.UnpackLog(event, "CommitmentUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrivateIssuerMigrateToPublicRequestedIterator is returned from FilterMigrateToPublicRequested and is used to iterate over the raw logs and unpacked data for MigrateToPublicRequested events raised by the PrivateIssuer contract.
type PrivateIssuerMigrateToPublicRequestedIterator struct {
	Event *PrivateIssuerMigrateToPublicRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrivateIssuerMigrateToPublicRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrivateIssuerMigrateToPublicRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrivateIssuerMigrateToPublicRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrivateIssuerMigrateToPublicRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrivateIssuerMigrateToPublicRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrivateIssuerMigrateToPublicRequested represents a MigrateToPublicRequested event raised by the PrivateIssuer contract.
type PrivateIssuerMigrateToPublicRequested struct {
	Owner common.Address
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterMigrateToPublicRequested is a free log retrieval operation binding the contract event 0xd18a53554a32a70376b6c223bfb0d84fc24caa3c704ef04eaf1b868e74ee8f6a.
//
// Solidity: event MigrateToPublicRequested(address indexed _owner, uint256 indexed _id)
func (_PrivateIssuer *PrivateIssuerFilterer) FilterMigrateToPublicRequested(opts *bind.FilterOpts, _owner []common.Address, _id []*big.Int) (*PrivateIssuerMigrateToPublicRequestedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _PrivateIssuer.contract.FilterLogs(opts, "MigrateToPublicRequested", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return &PrivateIssuerMigrateToPublicRequestedIterator{contract: _PrivateIssuer.contract, event: "MigrateToPublicRequested", logs: logs, sub: sub}, nil
}

// WatchMigrateToPublicRequested is a free log subscription operation binding the contract event 0xd18a53554a32a70376b6c223bfb0d84fc24caa3c704ef04eaf1b868e74ee8f6a.
//
// Solidity: event MigrateToPublicRequested(address indexed _owner, uint256 indexed _id)
func (_PrivateIssuer *PrivateIssuerFilterer) WatchMigrateToPublicRequested(opts *bind.WatchOpts, sink chan<- *PrivateIssuerMigrateToPublicRequested, _owner []common.Address, _id []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _PrivateIssuer.contract.WatchLogs(opts, "MigrateToPublicRequested", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrivateIssuerMigrateToPublicRequested)
				if err := _PrivateIssuer.contract.UnpackLog(event, "MigrateToPublicRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMigrateToPublicRequested is a log parse operation binding the contract event 0xd18a53554a32a70376b6c223bfb0d84fc24caa3c704ef04eaf1b868e74ee8f6a.
//
// Solidity: event MigrateToPublicRequested(address indexed _owner, uint256 indexed _id)
func (_PrivateIssuer *PrivateIssuerFilterer) ParseMigrateToPublicRequested(log types.Log) (*PrivateIssuerMigrateToPublicRequested, error) {
	event := new(PrivateIssuerMigrateToPublicRequested)
	if err := _PrivateIssuer.contract.UnpackLog(event, "MigrateToPublicRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrivateIssuerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the PrivateIssuer contract.
type PrivateIssuerOwnershipTransferredIterator struct {
	Event *PrivateIssuerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrivateIssuerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrivateIssuerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrivateIssuerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrivateIssuerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrivateIssuerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrivateIssuerOwnershipTransferred represents a OwnershipTransferred event raised by the PrivateIssuer contract.
type PrivateIssuerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PrivateIssuer *PrivateIssuerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*PrivateIssuerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PrivateIssuer.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &PrivateIssuerOwnershipTransferredIterator{contract: _PrivateIssuer.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PrivateIssuer *PrivateIssuerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *PrivateIssuerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _PrivateIssuer.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrivateIssuerOwnershipTransferred)
				if err := _PrivateIssuer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_PrivateIssuer *PrivateIssuerFilterer) ParseOwnershipTransferred(log types.Log) (*PrivateIssuerOwnershipTransferred, error) {
	event := new(PrivateIssuerOwnershipTransferred)
	if err := _PrivateIssuer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrivateIssuerPrivateCertificationRequestApprovedIterator is returned from FilterPrivateCertificationRequestApproved and is used to iterate over the raw logs and unpacked data for PrivateCertificationRequestApproved events raised by the PrivateIssuer contract.
type PrivateIssuerPrivateCertificationRequestApprovedIterator struct {
	Event *PrivateIssuerPrivateCertificationRequestApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrivateIssuerPrivateCertificationRequestApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrivateIssuerPrivateCertificationRequestApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrivateIssuerPrivateCertificationRequestApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrivateIssuerPrivateCertificationRequestApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrivateIssuerPrivateCertificationRequestApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrivateIssuerPrivateCertificationRequestApproved represents a PrivateCertificationRequestApproved event raised by the PrivateIssuer contract.
type PrivateIssuerPrivateCertificationRequestApproved struct {
	Owner         common.Address
	Id            *big.Int
	CertificateId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPrivateCertificationRequestApproved is a free log retrieval operation binding the contract event 0x382c89c3e15b040e673bdec044eba907f4e9af06293e0058163ca396cecb39ff.
//
// Solidity: event PrivateCertificationRequestApproved(address indexed _owner, uint256 indexed _id, uint256 indexed _certificateId)
func (_PrivateIssuer *PrivateIssuerFilterer) FilterPrivateCertificationRequestApproved(opts *bind.FilterOpts, _owner []common.Address, _id []*big.Int, _certificateId []*big.Int) (*PrivateIssuerPrivateCertificationRequestApprovedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _PrivateIssuer.contract.FilterLogs(opts, "PrivateCertificationRequestApproved", _ownerRule, _idRule, _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return &PrivateIssuerPrivateCertificationRequestApprovedIterator{contract: _PrivateIssuer.contract, event: "PrivateCertificationRequestApproved", logs: logs, sub: sub}, nil
}

// WatchPrivateCertificationRequestApproved is a free log subscription operation binding the contract event 0x382c89c3e15b040e673bdec044eba907f4e9af06293e0058163ca396cecb39ff.
//
// Solidity: event PrivateCertificationRequestApproved(address indexed _owner, uint256 indexed _id, uint256 indexed _certificateId)
func (_PrivateIssuer *PrivateIssuerFilterer) WatchPrivateCertificationRequestApproved(opts *bind.WatchOpts, sink chan<- *PrivateIssuerPrivateCertificationRequestApproved, _owner []common.Address, _id []*big.Int, _certificateId []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _PrivateIssuer.contract.WatchLogs(opts, "PrivateCertificationRequestApproved", _ownerRule, _idRule, _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrivateIssuerPrivateCertificationRequestApproved)
				if err := _PrivateIssuer.contract.UnpackLog(event, "PrivateCertificationRequestApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePrivateCertificationRequestApproved is a log parse operation binding the contract event 0x382c89c3e15b040e673bdec044eba907f4e9af06293e0058163ca396cecb39ff.
//
// Solidity: event PrivateCertificationRequestApproved(address indexed _owner, uint256 indexed _id, uint256 indexed _certificateId)
func (_PrivateIssuer *PrivateIssuerFilterer) ParsePrivateCertificationRequestApproved(log types.Log) (*PrivateIssuerPrivateCertificationRequestApproved, error) {
	event := new(PrivateIssuerPrivateCertificationRequestApproved)
	if err := _PrivateIssuer.contract.UnpackLog(event, "PrivateCertificationRequestApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrivateIssuerPrivateTransferRequestedIterator is returned from FilterPrivateTransferRequested and is used to iterate over the raw logs and unpacked data for PrivateTransferRequested events raised by the PrivateIssuer contract.
type PrivateIssuerPrivateTransferRequestedIterator struct {
	Event *PrivateIssuerPrivateTransferRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrivateIssuerPrivateTransferRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrivateIssuerPrivateTransferRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrivateIssuerPrivateTransferRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrivateIssuerPrivateTransferRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrivateIssuerPrivateTransferRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrivateIssuerPrivateTransferRequested represents a PrivateTransferRequested event raised by the PrivateIssuer contract.
type PrivateIssuerPrivateTransferRequested struct {
	Owner         common.Address
	CertificateId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterPrivateTransferRequested is a free log retrieval operation binding the contract event 0xde442453a4fabb4e6fe9cd90c427b54511e2e7712b8dfe60307a8de6209db0f1.
//
// Solidity: event PrivateTransferRequested(address indexed _owner, uint256 indexed _certificateId)
func (_PrivateIssuer *PrivateIssuerFilterer) FilterPrivateTransferRequested(opts *bind.FilterOpts, _owner []common.Address, _certificateId []*big.Int) (*PrivateIssuerPrivateTransferRequestedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _PrivateIssuer.contract.FilterLogs(opts, "PrivateTransferRequested", _ownerRule, _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return &PrivateIssuerPrivateTransferRequestedIterator{contract: _PrivateIssuer.contract, event: "PrivateTransferRequested", logs: logs, sub: sub}, nil
}

// WatchPrivateTransferRequested is a free log subscription operation binding the contract event 0xde442453a4fabb4e6fe9cd90c427b54511e2e7712b8dfe60307a8de6209db0f1.
//
// Solidity: event PrivateTransferRequested(address indexed _owner, uint256 indexed _certificateId)
func (_PrivateIssuer *PrivateIssuerFilterer) WatchPrivateTransferRequested(opts *bind.WatchOpts, sink chan<- *PrivateIssuerPrivateTransferRequested, _owner []common.Address, _certificateId []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _PrivateIssuer.contract.WatchLogs(opts, "PrivateTransferRequested", _ownerRule, _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrivateIssuerPrivateTransferRequested)
				if err := _PrivateIssuer.contract.UnpackLog(event, "PrivateTransferRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePrivateTransferRequested is a log parse operation binding the contract event 0xde442453a4fabb4e6fe9cd90c427b54511e2e7712b8dfe60307a8de6209db0f1.
//
// Solidity: event PrivateTransferRequested(address indexed _owner, uint256 indexed _certificateId)
func (_PrivateIssuer *PrivateIssuerFilterer) ParsePrivateTransferRequested(log types.Log) (*PrivateIssuerPrivateTransferRequested, error) {
	event := new(PrivateIssuerPrivateTransferRequested)
	if err := _PrivateIssuer.contract.UnpackLog(event, "PrivateTransferRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// PrivateIssuerUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the PrivateIssuer contract.
type PrivateIssuerUpgradedIterator struct {
	Event *PrivateIssuerUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PrivateIssuerUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PrivateIssuerUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PrivateIssuerUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PrivateIssuerUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PrivateIssuerUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PrivateIssuerUpgraded represents a Upgraded event raised by the PrivateIssuer contract.
type PrivateIssuerUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PrivateIssuer *PrivateIssuerFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*PrivateIssuerUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _PrivateIssuer.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &PrivateIssuerUpgradedIterator{contract: _PrivateIssuer.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PrivateIssuer *PrivateIssuerFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *PrivateIssuerUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _PrivateIssuer.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PrivateIssuerUpgraded)
				if err := _PrivateIssuer.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_PrivateIssuer *PrivateIssuerFilterer) ParseUpgraded(log types.Log) (*PrivateIssuerUpgraded, error) {
	event := new(PrivateIssuerUpgraded)
	if err := _PrivateIssuer.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
