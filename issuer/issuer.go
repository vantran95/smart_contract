// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package issuer

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IssuerCertificationRequest is an auto generated low-level Go binding around an user-defined struct.
type IssuerCertificationRequest struct {
	Owner    common.Address
	Data     []byte
	Approved bool
	Revoked  bool
	Sender   common.Address
}

// IssuerABI is the input ABI used to generate the binding from.
const IssuerABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"}],\"name\":\"CertificateRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_volume\",\"type\":\"uint256\"}],\"name\":\"CertificateVolumeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"}],\"name\":\"CertificationRequestApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"CertificationRequestRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"CertificationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"certificateTopic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateTopic\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_privateIssuer\",\"type\":\"address\"}],\"name\":\"setPrivateIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getCertificationRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"internalType\":\"structIssuer.CertificationRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"requestCertificationFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"requestCertification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"tryGetCertId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"revokeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"}],\"name\":\"revokeCertificate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveCertificationRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_volume\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"isRequestValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrivateIssuerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// IssuerBin is the compiled bytecode used for deploying new contracts.
var IssuerBin = "0x608060405234801561001057600080fd5b50613a90806100206000396000f3fe6080604052600436106101405760003560e01c80636e5f20bd116100b6578063da35a26f1161006f578063da35a26f14610461578063e3e47cb61461048a578063e7d915cf146104c7578063f0b5b68d146104f0578063f21de1e81461051b578063f2fde38b1461054657610140565b80636e5f20bd1461034f578063715018a61461037a5780637b103999146103915780638da5cb5b146103bc5780639b709b7a146103e7578063bb3acde91461042457610140565b80633db57170116101085780633db57170146102285780633e061340146102655780633e42e9fa146102a25780634f1ef286146102cb57806354fd4d50146102e75780636512f1111461031257610140565b806306f5497e14610145578063156e29f61461016e57806320f2637d146101975780632b1f4388146101d45780633659cfe6146101ff575b600080fd5b34801561015157600080fd5b5061016c60048036038101906101679190612bb9565b61056f565b005b34801561017a57600080fd5b5061019560048036038101906101909190612abd565b6106a8565b005b3480156101a357600080fd5b506101be60048036038101906101b99190612b5d565b6107ff565b6040516101cb91906133b9565b60405180910390f35b3480156101e057600080fd5b506101e9610a38565b6040516101f691906130e3565b60405180910390f35b34801561020b57600080fd5b50610226600480360381019061022191906129c5565b610a5e565b005b34801561023457600080fd5b5061024f600480360381019061024a9190612bb9565b610a85565b60405161025c9190613397565b60405180910390f35b34801561027157600080fd5b5061028c60048036038101906102879190612bb9565b610c26565b60405161029991906133b9565b60405180910390f35b3480156102ae57600080fd5b506102c960048036038101906102c491906129c5565b610c43565b005b6102e560048036038101906102e091906129f2565b610e04565b005b3480156102f357600080fd5b506102fc610e1d565b6040516103099190613195565b60405180910390f35b34801561031e57600080fd5b5061033960048036038101906103349190612bb9565b610e5a565b604051610346919061315f565b60405180910390f35b34801561035b57600080fd5b50610364611095565b60405161037191906130e3565b60405180910390f35b34801561038657600080fd5b5061038f6110bf565b005b34801561039d57600080fd5b506103a6611147565b6040516103b3919061317a565b60405180910390f35b3480156103c857600080fd5b506103d161116d565b6040516103de91906130e3565b60405180910390f35b3480156103f357600080fd5b5061040e60048036038101906104099190612b10565b611197565b60405161041b91906133b9565b60405180910390f35b34801561043057600080fd5b5061044b60048036038101906104469190612a4e565b6111f6565b60405161045891906133b9565b60405180910390f35b34801561046d57600080fd5b5061048860048036038101906104839190612c13565b611296565b005b34801561049657600080fd5b506104b160048036038101906104ac9190612c53565b611439565b6040516104be91906133b9565b60405180910390f35b3480156104d357600080fd5b506104ee60048036038101906104e99190612bb9565b61178d565b005b3480156104fc57600080fd5b506105056119ae565b60405161051291906133b9565b60405180910390f35b34801561052757600080fd5b506105306119b4565b60405161053d91906130e3565b60405180910390f35b34801561055257600080fd5b5061056d600480360381019061056891906129c5565b6119de565b005b610577611ad6565b73ffffffffffffffffffffffffffffffffffffffff1661059561116d565b73ffffffffffffffffffffffffffffffffffffffff16146105eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e2906132d7565b60405180910390fd5b60cf600082815260200190815260200160002060009054906101000a900460ff161561064c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064390613377565b60405180910390fd5b600160cf600083815260200190815260200160002060006101000a81548160ff021916908315150217905550807fefa6c5f47ac2523bb4db18032377bf7fdce0fa9d86eddcae1ca9bba38be615d760405160405180910390a250565b6106b0611ad6565b73ffffffffffffffffffffffffffffffffffffffff166106ce61116d565b73ffffffffffffffffffffffffffffffffffffffff1614610724576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071b906132d7565b60405180910390fd5b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663836a10408385846040518463ffffffff1660e01b8152600401610783939291906133d4565b600060405180830381600087803b15801561079d57600080fd5b505af11580156107b1573d6000803e3d6000fd5b5050505080828473ffffffffffffffffffffffffffffffffffffffff167f41c2dee25673dbafd1129227b55cc9d9ba5887f7e753c351ce274f4641daf7e260405160405180910390a4505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610870576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086790613217565b60405180910390fd5b600060ce60008154610881906135db565b91905081905590506040518060a001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018581526020016000151581526020016000151581526020016108d0611ad6565b73ffffffffffffffffffffffffffffffffffffffff1681525060cc600083815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061095f9291906127be565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548160ff02191690831515021790555060808201518160020160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050808373ffffffffffffffffffffffffffffffffffffffff167ffda3ec1cbd67cbf30346ae8c497a82d68bbfa00bd5d43b96761c03858a08367b60405160405180910390a38091505092915050565b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a6781611ade565b610a8281604051806020016040528060008152506000611b5d565b50565b610a8d612844565b60cc60008381526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610b1190613578565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3d90613578565b8015610b8a5780601f10610b5f57610100808354040283529160200191610b8a565b820191906000526020600020905b815481529060010190602001808311610b6d57829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581526020016002820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b600060cd6000838152602001908152602001600020549050919050565b610c4b611ad6565b73ffffffffffffffffffffffffffffffffffffffff16610c6961116d565b73ffffffffffffffffffffffffffffffffffffffff1614610cbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb6906132d7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2690613337565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610dc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db790613297565b60405180910390fd5b8060cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610e0d82611ade565b610e1982826001611b5d565b5050565b60606040518060400160405280600481526020017f76302e3100000000000000000000000000000000000000000000000000000000815250905090565b600060ce54821115610ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9890613357565b60405180910390fd5b600060cc60008481526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054610f2790613578565b80601f0160208091040260200160405190810160405280929190818152602001828054610f5390613578565b8015610fa05780601f10610f7557610100808354040283529160200191610fa0565b820191906000526020600020905b815481529060010190602001808311610f8357829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581526020016002820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600060cd60008581526020019081526020016000205490508160400151801561106257508160600151155b801561108c575060cf600082815260200190815260200160002060009054906101000a900460ff16155b92505050919050565b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6110c7611ad6565b73ffffffffffffffffffffffffffffffffffffffff166110e561116d565b73ffffffffffffffffffffffffffffffffffffffff161461113b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611132906132d7565b60405180910390fd5b6111456000611d2e565b565b60ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006111ee83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506111e9611ad6565b6107ff565b905092915050565b6000611200611ad6565b73ffffffffffffffffffffffffffffffffffffffff1661121e61116d565b73ffffffffffffffffffffffffffffffffffffffff1614611274576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126b906132d7565b60405180910390fd5b600061128083866107ff565b905061128c8185611439565b9150509392505050565b600060019054906101000a900460ff16806112bc575060008054906101000a900460ff16155b6112fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f290613257565b60405180910390fd5b60008060019054906101000a900460ff16159050801561134b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156113bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b290613337565b60405180910390fd5b8260c9819055508160ca60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061140b611df4565b611413611edd565b80156114345760008060016101000a81548160ff0219169083151502179055505b505050565b600061144361116d565b73ffffffffffffffffffffffffffffffffffffffff16611461611ad6565b73ffffffffffffffffffffffffffffffffffffffff1614806114d7575060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166114bf611ad6565b73ffffffffffffffffffffffffffffffffffffffff16145b611516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150d90613237565b60405180910390fd5b61151f83611fc6565b61155e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155590613277565b60405180910390fd5b600060cc6000858152602001908152602001600020905060018160020160006101000a81548160ff021916908315150217905550600060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663543d526d8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168760405160240161160891906133b9565b6040516020818303038152906040527f6512f111000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060c95488876001016040518663ffffffff1660e01b81526004016116ad9594939291906130fe565b602060405180830381600087803b1580156116c757600080fd5b505af11580156116db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ff9190612be6565b90508060cd60008781526020019081526020016000208190555080858360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f3e5ec6d038fea8aae03ddd86c2882c546a05ea282e753cf085c8213a61a7913060405160405180910390a4809250505092915050565b600060cc600083815260200190815260200160002090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166117e7611ad6565b73ffffffffffffffffffffffffffffffffffffffff161480611842575061180c61116d565b73ffffffffffffffffffffffffffffffffffffffff1661182a611ad6565b73ffffffffffffffffffffffffffffffffffffffff16145b611881576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611878906132f7565b60405180910390fd5b8060020160019054906101000a900460ff16156118d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ca90613377565b60405180910390fd5b8060020160009054906101000a900460ff1615611925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191c906131b7565b60405180910390fd5b60018160020160016101000a81548160ff021916908315150217905550818160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2b117599f21d800ddd10552521c610b44ab51d64ac07ae5cb3ee28bbb19946e560405160405180910390a35050565b60c95481565b600060ca60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6119e6611ad6565b73ffffffffffffffffffffffffffffffffffffffff16611a0461116d565b73ffffffffffffffffffffffffffffffffffffffff1614611a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a51906132d7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611aca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac1906131f7565b60405180910390fd5b611ad381611d2e565b50565b600033905090565b611ae6611ad6565b73ffffffffffffffffffffffffffffffffffffffff16611b0461116d565b73ffffffffffffffffffffffffffffffffffffffff1614611b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b51906132d7565b60405180910390fd5b50565b6000611b67612179565b9050611b72846121d0565b600083511180611b7f5750815b15611b9057611b8e8484612289565b505b6000611bbe7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b61236d565b90508060000160009054906101000a900460ff16611d275760018160000160006101000a81548160ff021916908315150217905550611c8a8583604051602401611c0891906130e3565b6040516020818303038152906040527f3659cfe6000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612289565b5060008160000160006101000a81548160ff021916908315150217905550611cb0612179565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611d1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d14906131d7565b60405180910390fd5b611d2685612377565b5b5050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1680611e1a575060008054906101000a900460ff16155b611e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5090613257565b60405180910390fd5b60008060019054906101000a900460ff161590508015611ea9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611eb16123c6565b611eb961249f565b8015611eda5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680611f03575060008054906101000a900460ff16155b611f42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3990613257565b60405180910390fd5b60008060019054906101000a900460ff161590508015611f92576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611f9a612588565b611fa2612661565b8015611fc35760008060016101000a81548160ff0219169083151502179055505b50565b60008060cc60008481526020019081526020016000206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461204d90613578565b80601f016020809104026020016040519081016040528092919081815260200182805461207990613578565b80156120c65780601f1061209b576101008083540402835291602001916120c6565b820191906000526020600020905b8154815290600101906020018083116120a957829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900460ff161515151581526020016002820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050806040015115801561217157508060600151155b915050919050565b60006121a77f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61273a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6121d981612744565b612218576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220f906132b7565b60405180910390fd5b806122457f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61273a565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606061229483612744565b6122d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ca90613317565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516122fb91906130cc565b600060405180830381855af49150503d8060008114612336576040519150601f19603f3d011682016040523d82523d6000602084013e61233b565b606091505b50915091506123638282604051806060016040528060278152602001613a3460279139612757565b9250505092915050565b6000819050919050565b612380816121d0565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b600060019054906101000a900460ff16806123ec575060008054906101000a900460ff16155b61242b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242290613257565b60405180910390fd5b60008060019054906101000a900460ff16159050801561247b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561249c5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806124c5575060008054906101000a900460ff16155b612504576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124fb90613257565b60405180910390fd5b60008060019054906101000a900460ff161590508015612554576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61256461255f611ad6565b611d2e565b80156125855760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806125ae575060008054906101000a900460ff16155b6125ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e490613257565b60405180910390fd5b60008060019054906101000a900460ff16159050801561263d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b801561265e5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612687575060008054906101000a900460ff16155b6126c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126bd90613257565b60405180910390fd5b60008060019054906101000a900460ff161590508015612716576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156127375760008060016101000a81548160ff0219169083151502179055505b50565b6000819050919050565b600080823b905060008111915050919050565b60608315612767578290506127b7565b60008351111561277a5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127ae9190613195565b60405180910390fd5b9392505050565b8280546127ca90613578565b90600052602060002090601f0160209004810192826127ec5760008555612833565b82601f1061280557805160ff1916838001178555612833565b82800160010185558215612833579182015b82811115612832578251825591602001919060010190612817565b5b50905061284091906128a3565b5090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600015158152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b5b808211156128bc5760008160009055506001016128a4565b5090565b60006128d36128ce84613430565b61340b565b9050828152602081018484840111156128ef576128ee6136c0565b5b6128fa848285613536565b509392505050565b60008135905061291181613a05565b92915050565b60008083601f84011261292d5761292c6136b6565b5b8235905067ffffffffffffffff81111561294a576129496136b1565b5b602083019150836001820283011115612966576129656136bb565b5b9250929050565b600082601f830112612982576129816136b6565b5b81356129928482602086016128c0565b91505092915050565b6000813590506129aa81613a1c565b92915050565b6000815190506129bf81613a1c565b92915050565b6000602082840312156129db576129da6136ca565b5b60006129e984828501612902565b91505092915050565b60008060408385031215612a0957612a086136ca565b5b6000612a1785828601612902565b925050602083013567ffffffffffffffff811115612a3857612a376136c5565b5b612a448582860161296d565b9150509250929050565b600080600060608486031215612a6757612a666136ca565b5b6000612a7586828701612902565b9350506020612a868682870161299b565b925050604084013567ffffffffffffffff811115612aa757612aa66136c5565b5b612ab38682870161296d565b9150509250925092565b600080600060608486031215612ad657612ad56136ca565b5b6000612ae486828701612902565b9350506020612af58682870161299b565b9250506040612b068682870161299b565b9150509250925092565b60008060208385031215612b2757612b266136ca565b5b600083013567ffffffffffffffff811115612b4557612b446136c5565b5b612b5185828601612917565b92509250509250929050565b60008060408385031215612b7457612b736136ca565b5b600083013567ffffffffffffffff811115612b9257612b916136c5565b5b612b9e8582860161296d565b9250506020612baf85828601612902565b9150509250929050565b600060208284031215612bcf57612bce6136ca565b5b6000612bdd8482850161299b565b91505092915050565b600060208284031215612bfc57612bfb6136ca565b5b6000612c0a848285016129b0565b91505092915050565b60008060408385031215612c2a57612c296136ca565b5b6000612c388582860161299b565b9250506020612c4985828601612902565b9150509250929050565b60008060408385031215612c6a57612c696136ca565b5b6000612c788582860161299b565b9250506020612c898582860161299b565b9150509250929050565b612c9c816134ca565b82525050565b612cab816134ca565b82525050565b612cba816134dc565b82525050565b612cc9816134dc565b82525050565b6000612cda82613476565b612ce4818561348c565b9350612cf4818560208601613545565b612cfd816136cf565b840191505092915050565b6000612d1382613476565b612d1d818561349d565b9350612d2d818560208601613545565b612d36816136cf565b840191505092915050565b6000612d4c82613476565b612d5681856134ae565b9350612d66818560208601613545565b80840191505092915050565b60008154612d7f81613578565b612d89818661349d565b94506001821660008114612da45760018114612db657612de9565b60ff1983168652602086019350612de9565b612dbf85613461565b60005b83811015612de157815481890152600182019150602081019050612dc2565b808801955050505b50505092915050565b612dfb81613512565b82525050565b6000612e0c82613481565b612e1681856134b9565b9350612e26818560208601613545565b612e2f816136cf565b840191505092915050565b6000612e47601e836134b9565b9150612e52826136e0565b602082019050919050565b6000612e6a602f836134b9565b9150612e7582613709565b604082019050919050565b6000612e8d6026836134b9565b9150612e9882613758565b604082019050919050565b6000612eb06013836134b9565b9150612ebb826137a7565b602082019050919050565b6000612ed3601a836134b9565b9150612ede826137d0565b602082019050919050565b6000612ef6602e836134b9565b9150612f01826137f9565b604082019050919050565b6000612f19601b836134b9565b9150612f2482613848565b602082019050919050565b6000612f3c601a836134b9565b9150612f4782613871565b602082019050919050565b6000612f5f602d836134b9565b9150612f6a8261389a565b604082019050919050565b6000612f826020836134b9565b9150612f8d826138e9565b602082019050919050565b6000612fa5601b836134b9565b9150612fb082613912565b602082019050919050565b6000612fc86026836134b9565b9150612fd38261393b565b604082019050919050565b6000612feb6016836134b9565b9150612ff68261398a565b602082019050919050565b600061300e601d836134b9565b9150613019826139b3565b602082019050919050565b6000613031600f836134b9565b915061303c826139dc565b602082019050919050565b600060a08301600083015161305f6000860182612c93565b50602083015184820360208601526130778282612ccf565b915050604083015161308c6040860182612cb1565b50606083015161309f6060860182612cb1565b5060808301516130b26080860182612c93565b508091505092915050565b6130c681613508565b82525050565b60006130d88284612d41565b915081905092915050565b60006020820190506130f86000830184612ca2565b92915050565b600060a0820190506131136000830188612ca2565b81810360208301526131258187612d08565b905061313460408301866130bd565b61314160608301856130bd565b81810360808301526131538184612d72565b90509695505050505050565b60006020820190506131746000830184612cc0565b92915050565b600060208201905061318f6000830184612df2565b92915050565b600060208201905081810360008301526131af8184612e01565b905092915050565b600060208201905081810360008301526131d081612e3a565b9050919050565b600060208201905081810360008301526131f081612e5d565b9050919050565b6000602082019050818103600083015261321081612e80565b9050919050565b6000602082019050818103600083015261323081612ea3565b9050919050565b6000602082019050818103600083015261325081612ec6565b9050919050565b6000602082019050818103600083015261327081612ee9565b9050919050565b6000602082019050818103600083015261329081612f0c565b9050919050565b600060208201905081810360008301526132b081612f2f565b9050919050565b600060208201905081810360008301526132d081612f52565b9050919050565b600060208201905081810360008301526132f081612f75565b9050919050565b6000602082019050818103600083015261331081612f98565b9050919050565b6000602082019050818103600083015261333081612fbb565b9050919050565b6000602082019050818103600083015261335081612fde565b9050919050565b6000602082019050818103600083015261337081613001565b9050919050565b6000602082019050818103600083015261339081613024565b9050919050565b600060208201905081810360008301526133b18184613047565b905092915050565b60006020820190506133ce60008301846130bd565b92915050565b60006060820190506133e960008301866130bd565b6133f66020830185612ca2565b61340360408301846130bd565b949350505050565b6000613415613426565b905061342182826135aa565b919050565b6000604051905090565b600067ffffffffffffffff82111561344b5761344a613682565b5b613454826136cf565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006134d5826134e8565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061351d82613524565b9050919050565b600061352f826134e8565b9050919050565b82818337600083830152505050565b60005b83811015613563578082015181840152602081019050613548565b83811115613572576000848401525b50505050565b6000600282049050600182168061359057607f821691505b602082108114156135a4576135a3613653565b5b50919050565b6135b3826136cf565b810181811067ffffffffffffffff821117156135d2576135d1613682565b5b80604052505050565b60006135e682613508565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561361957613618613624565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f43616e2774207265766f6b6520617070726f7665642072657175657374730000600082015250565b7f45524331393637557067726164653a207570677261646520627265616b73206660008201527f7572746865722075706772616465730000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e65722063616e6e6f742062652030783000000000000000000000000000600082015250565b7f63616c6c6572206e6f74206f776e6572206f7220697373756572000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f616c726561647920617070726f766564206f72207265766f6b65640000000000600082015250565b7f507269766174652069737375657220616c726561647920736574000000000000600082015250565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f556e617574686f72697a6564207265766f6b6520726571756573740000000000600082015250565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b7f43616e6e6f742075736520616464726573732030783000000000000000000000600082015250565b7f636572742072657175657374204944206f7574206f6620626f756e6473000000600082015250565b7f416c7265616479207265766f6b65640000000000000000000000000000000000600082015250565b613a0e816134ca565b8114613a1957600080fd5b50565b613a2581613508565b8114613a3057600080fd5b5056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207b8a328552d9cb93c637214183cb8a43a10cd5359c053ed39561f45f67ea202a64736f6c63430008060033"

// DeployIssuer deploys a new Ethereum contract, binding an instance of Issuer to it.
func DeployIssuer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Issuer, error) {
	parsed, err := abi.JSON(strings.NewReader(IssuerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IssuerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Issuer{IssuerCaller: IssuerCaller{contract: contract}, IssuerTransactor: IssuerTransactor{contract: contract}, IssuerFilterer: IssuerFilterer{contract: contract}}, nil
}

// Issuer is an auto generated Go binding around an Ethereum contract.
type Issuer struct {
	IssuerCaller     // Read-only binding to the contract
	IssuerTransactor // Write-only binding to the contract
	IssuerFilterer   // Log filterer for contract events
}

// IssuerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IssuerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IssuerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IssuerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IssuerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IssuerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IssuerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IssuerSession struct {
	Contract     *Issuer           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IssuerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IssuerCallerSession struct {
	Contract *IssuerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IssuerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IssuerTransactorSession struct {
	Contract     *IssuerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IssuerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IssuerRaw struct {
	Contract *Issuer // Generic contract binding to access the raw methods on
}

// IssuerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IssuerCallerRaw struct {
	Contract *IssuerCaller // Generic read-only contract binding to access the raw methods on
}

// IssuerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IssuerTransactorRaw struct {
	Contract *IssuerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIssuer creates a new instance of Issuer, bound to a specific deployed contract.
func NewIssuer(address common.Address, backend bind.ContractBackend) (*Issuer, error) {
	contract, err := bindIssuer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Issuer{IssuerCaller: IssuerCaller{contract: contract}, IssuerTransactor: IssuerTransactor{contract: contract}, IssuerFilterer: IssuerFilterer{contract: contract}}, nil
}

// NewIssuerCaller creates a new read-only instance of Issuer, bound to a specific deployed contract.
func NewIssuerCaller(address common.Address, caller bind.ContractCaller) (*IssuerCaller, error) {
	contract, err := bindIssuer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IssuerCaller{contract: contract}, nil
}

// NewIssuerTransactor creates a new write-only instance of Issuer, bound to a specific deployed contract.
func NewIssuerTransactor(address common.Address, transactor bind.ContractTransactor) (*IssuerTransactor, error) {
	contract, err := bindIssuer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IssuerTransactor{contract: contract}, nil
}

// NewIssuerFilterer creates a new log filterer instance of Issuer, bound to a specific deployed contract.
func NewIssuerFilterer(address common.Address, filterer bind.ContractFilterer) (*IssuerFilterer, error) {
	contract, err := bindIssuer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IssuerFilterer{contract: contract}, nil
}

// bindIssuer binds a generic wrapper to an already deployed contract.
func bindIssuer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IssuerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Issuer *IssuerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Issuer.Contract.IssuerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Issuer *IssuerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Issuer.Contract.IssuerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Issuer *IssuerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Issuer.Contract.IssuerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Issuer *IssuerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Issuer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Issuer *IssuerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Issuer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Issuer *IssuerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Issuer.Contract.contract.Transact(opts, method, params...)
}

// CertificateTopic is a free data retrieval call binding the contract method 0xf0b5b68d.
//
// Solidity: function certificateTopic() view returns(uint256)
func (_Issuer *IssuerCaller) CertificateTopic(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "certificateTopic")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CertificateTopic is a free data retrieval call binding the contract method 0xf0b5b68d.
//
// Solidity: function certificateTopic() view returns(uint256)
func (_Issuer *IssuerSession) CertificateTopic() (*big.Int, error) {
	return _Issuer.Contract.CertificateTopic(&_Issuer.CallOpts)
}

// CertificateTopic is a free data retrieval call binding the contract method 0xf0b5b68d.
//
// Solidity: function certificateTopic() view returns(uint256)
func (_Issuer *IssuerCallerSession) CertificateTopic() (*big.Int, error) {
	return _Issuer.Contract.CertificateTopic(&_Issuer.CallOpts)
}

// GetCertificationRequest is a free data retrieval call binding the contract method 0x3db57170.
//
// Solidity: function getCertificationRequest(uint256 _requestId) view returns((address,bytes,bool,bool,address))
func (_Issuer *IssuerCaller) GetCertificationRequest(opts *bind.CallOpts, _requestId *big.Int) (IssuerCertificationRequest, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "getCertificationRequest", _requestId)

	if err != nil {
		return *new(IssuerCertificationRequest), err
	}

	out0 := *abi.ConvertType(out[0], new(IssuerCertificationRequest)).(*IssuerCertificationRequest)

	return out0, err

}

// GetCertificationRequest is a free data retrieval call binding the contract method 0x3db57170.
//
// Solidity: function getCertificationRequest(uint256 _requestId) view returns((address,bytes,bool,bool,address))
func (_Issuer *IssuerSession) GetCertificationRequest(_requestId *big.Int) (IssuerCertificationRequest, error) {
	return _Issuer.Contract.GetCertificationRequest(&_Issuer.CallOpts, _requestId)
}

// GetCertificationRequest is a free data retrieval call binding the contract method 0x3db57170.
//
// Solidity: function getCertificationRequest(uint256 _requestId) view returns((address,bytes,bool,bool,address))
func (_Issuer *IssuerCallerSession) GetCertificationRequest(_requestId *big.Int) (IssuerCertificationRequest, error) {
	return _Issuer.Contract.GetCertificationRequest(&_Issuer.CallOpts, _requestId)
}

// GetPrivateIssuerAddress is a free data retrieval call binding the contract method 0x6e5f20bd.
//
// Solidity: function getPrivateIssuerAddress() view returns(address)
func (_Issuer *IssuerCaller) GetPrivateIssuerAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "getPrivateIssuerAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetPrivateIssuerAddress is a free data retrieval call binding the contract method 0x6e5f20bd.
//
// Solidity: function getPrivateIssuerAddress() view returns(address)
func (_Issuer *IssuerSession) GetPrivateIssuerAddress() (common.Address, error) {
	return _Issuer.Contract.GetPrivateIssuerAddress(&_Issuer.CallOpts)
}

// GetPrivateIssuerAddress is a free data retrieval call binding the contract method 0x6e5f20bd.
//
// Solidity: function getPrivateIssuerAddress() view returns(address)
func (_Issuer *IssuerCallerSession) GetPrivateIssuerAddress() (common.Address, error) {
	return _Issuer.Contract.GetPrivateIssuerAddress(&_Issuer.CallOpts)
}

// GetRegistryAddress is a free data retrieval call binding the contract method 0xf21de1e8.
//
// Solidity: function getRegistryAddress() view returns(address)
func (_Issuer *IssuerCaller) GetRegistryAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "getRegistryAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRegistryAddress is a free data retrieval call binding the contract method 0xf21de1e8.
//
// Solidity: function getRegistryAddress() view returns(address)
func (_Issuer *IssuerSession) GetRegistryAddress() (common.Address, error) {
	return _Issuer.Contract.GetRegistryAddress(&_Issuer.CallOpts)
}

// GetRegistryAddress is a free data retrieval call binding the contract method 0xf21de1e8.
//
// Solidity: function getRegistryAddress() view returns(address)
func (_Issuer *IssuerCallerSession) GetRegistryAddress() (common.Address, error) {
	return _Issuer.Contract.GetRegistryAddress(&_Issuer.CallOpts)
}

// IsRequestValid is a free data retrieval call binding the contract method 0x6512f111.
//
// Solidity: function isRequestValid(uint256 _requestId) view returns(bool)
func (_Issuer *IssuerCaller) IsRequestValid(opts *bind.CallOpts, _requestId *big.Int) (bool, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "isRequestValid", _requestId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRequestValid is a free data retrieval call binding the contract method 0x6512f111.
//
// Solidity: function isRequestValid(uint256 _requestId) view returns(bool)
func (_Issuer *IssuerSession) IsRequestValid(_requestId *big.Int) (bool, error) {
	return _Issuer.Contract.IsRequestValid(&_Issuer.CallOpts, _requestId)
}

// IsRequestValid is a free data retrieval call binding the contract method 0x6512f111.
//
// Solidity: function isRequestValid(uint256 _requestId) view returns(bool)
func (_Issuer *IssuerCallerSession) IsRequestValid(_requestId *big.Int) (bool, error) {
	return _Issuer.Contract.IsRequestValid(&_Issuer.CallOpts, _requestId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Issuer *IssuerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Issuer *IssuerSession) Owner() (common.Address, error) {
	return _Issuer.Contract.Owner(&_Issuer.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Issuer *IssuerCallerSession) Owner() (common.Address, error) {
	return _Issuer.Contract.Owner(&_Issuer.CallOpts)
}

// PrivateIssuer is a free data retrieval call binding the contract method 0x2b1f4388.
//
// Solidity: function privateIssuer() view returns(address)
func (_Issuer *IssuerCaller) PrivateIssuer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "privateIssuer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PrivateIssuer is a free data retrieval call binding the contract method 0x2b1f4388.
//
// Solidity: function privateIssuer() view returns(address)
func (_Issuer *IssuerSession) PrivateIssuer() (common.Address, error) {
	return _Issuer.Contract.PrivateIssuer(&_Issuer.CallOpts)
}

// PrivateIssuer is a free data retrieval call binding the contract method 0x2b1f4388.
//
// Solidity: function privateIssuer() view returns(address)
func (_Issuer *IssuerCallerSession) PrivateIssuer() (common.Address, error) {
	return _Issuer.Contract.PrivateIssuer(&_Issuer.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Issuer *IssuerCaller) Registry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "registry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Issuer *IssuerSession) Registry() (common.Address, error) {
	return _Issuer.Contract.Registry(&_Issuer.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Issuer *IssuerCallerSession) Registry() (common.Address, error) {
	return _Issuer.Contract.Registry(&_Issuer.CallOpts)
}

// TryGetCertId is a free data retrieval call binding the contract method 0x3e061340.
//
// Solidity: function tryGetCertId(uint256 _requestId) view returns(uint256)
func (_Issuer *IssuerCaller) TryGetCertId(opts *bind.CallOpts, _requestId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "tryGetCertId", _requestId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TryGetCertId is a free data retrieval call binding the contract method 0x3e061340.
//
// Solidity: function tryGetCertId(uint256 _requestId) view returns(uint256)
func (_Issuer *IssuerSession) TryGetCertId(_requestId *big.Int) (*big.Int, error) {
	return _Issuer.Contract.TryGetCertId(&_Issuer.CallOpts, _requestId)
}

// TryGetCertId is a free data retrieval call binding the contract method 0x3e061340.
//
// Solidity: function tryGetCertId(uint256 _requestId) view returns(uint256)
func (_Issuer *IssuerCallerSession) TryGetCertId(_requestId *big.Int) (*big.Int, error) {
	return _Issuer.Contract.TryGetCertId(&_Issuer.CallOpts, _requestId)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_Issuer *IssuerCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_Issuer *IssuerSession) Version() (string, error) {
	return _Issuer.Contract.Version(&_Issuer.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_Issuer *IssuerCallerSession) Version() (string, error) {
	return _Issuer.Contract.Version(&_Issuer.CallOpts)
}

// ApproveCertificationRequest is a paid mutator transaction binding the contract method 0xe3e47cb6.
//
// Solidity: function approveCertificationRequest(uint256 _requestId, uint256 _value) returns(uint256)
func (_Issuer *IssuerTransactor) ApproveCertificationRequest(opts *bind.TransactOpts, _requestId *big.Int, _value *big.Int) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "approveCertificationRequest", _requestId, _value)
}

// ApproveCertificationRequest is a paid mutator transaction binding the contract method 0xe3e47cb6.
//
// Solidity: function approveCertificationRequest(uint256 _requestId, uint256 _value) returns(uint256)
func (_Issuer *IssuerSession) ApproveCertificationRequest(_requestId *big.Int, _value *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.ApproveCertificationRequest(&_Issuer.TransactOpts, _requestId, _value)
}

// ApproveCertificationRequest is a paid mutator transaction binding the contract method 0xe3e47cb6.
//
// Solidity: function approveCertificationRequest(uint256 _requestId, uint256 _value) returns(uint256)
func (_Issuer *IssuerTransactorSession) ApproveCertificationRequest(_requestId *big.Int, _value *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.ApproveCertificationRequest(&_Issuer.TransactOpts, _requestId, _value)
}

// Initialize is a paid mutator transaction binding the contract method 0xda35a26f.
//
// Solidity: function initialize(uint256 _certificateTopic, address _registry) returns()
func (_Issuer *IssuerTransactor) Initialize(opts *bind.TransactOpts, _certificateTopic *big.Int, _registry common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "initialize", _certificateTopic, _registry)
}

// Initialize is a paid mutator transaction binding the contract method 0xda35a26f.
//
// Solidity: function initialize(uint256 _certificateTopic, address _registry) returns()
func (_Issuer *IssuerSession) Initialize(_certificateTopic *big.Int, _registry common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.Initialize(&_Issuer.TransactOpts, _certificateTopic, _registry)
}

// Initialize is a paid mutator transaction binding the contract method 0xda35a26f.
//
// Solidity: function initialize(uint256 _certificateTopic, address _registry) returns()
func (_Issuer *IssuerTransactorSession) Initialize(_certificateTopic *big.Int, _registry common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.Initialize(&_Issuer.TransactOpts, _certificateTopic, _registry)
}

// Issue is a paid mutator transaction binding the contract method 0xbb3acde9.
//
// Solidity: function issue(address _to, uint256 _value, bytes _data) returns(uint256)
func (_Issuer *IssuerTransactor) Issue(opts *bind.TransactOpts, _to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "issue", _to, _value, _data)
}

// Issue is a paid mutator transaction binding the contract method 0xbb3acde9.
//
// Solidity: function issue(address _to, uint256 _value, bytes _data) returns(uint256)
func (_Issuer *IssuerSession) Issue(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.Issue(&_Issuer.TransactOpts, _to, _value, _data)
}

// Issue is a paid mutator transaction binding the contract method 0xbb3acde9.
//
// Solidity: function issue(address _to, uint256 _value, bytes _data) returns(uint256)
func (_Issuer *IssuerTransactorSession) Issue(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.Issue(&_Issuer.TransactOpts, _to, _value, _data)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address _to, uint256 _certificateId, uint256 _volume) returns()
func (_Issuer *IssuerTransactor) Mint(opts *bind.TransactOpts, _to common.Address, _certificateId *big.Int, _volume *big.Int) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "mint", _to, _certificateId, _volume)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address _to, uint256 _certificateId, uint256 _volume) returns()
func (_Issuer *IssuerSession) Mint(_to common.Address, _certificateId *big.Int, _volume *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.Mint(&_Issuer.TransactOpts, _to, _certificateId, _volume)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address _to, uint256 _certificateId, uint256 _volume) returns()
func (_Issuer *IssuerTransactorSession) Mint(_to common.Address, _certificateId *big.Int, _volume *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.Mint(&_Issuer.TransactOpts, _to, _certificateId, _volume)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Issuer *IssuerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Issuer *IssuerSession) RenounceOwnership() (*types.Transaction, error) {
	return _Issuer.Contract.RenounceOwnership(&_Issuer.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Issuer *IssuerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Issuer.Contract.RenounceOwnership(&_Issuer.TransactOpts)
}

// RequestCertification is a paid mutator transaction binding the contract method 0x9b709b7a.
//
// Solidity: function requestCertification(bytes _data) returns(uint256)
func (_Issuer *IssuerTransactor) RequestCertification(opts *bind.TransactOpts, _data []byte) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "requestCertification", _data)
}

// RequestCertification is a paid mutator transaction binding the contract method 0x9b709b7a.
//
// Solidity: function requestCertification(bytes _data) returns(uint256)
func (_Issuer *IssuerSession) RequestCertification(_data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertification(&_Issuer.TransactOpts, _data)
}

// RequestCertification is a paid mutator transaction binding the contract method 0x9b709b7a.
//
// Solidity: function requestCertification(bytes _data) returns(uint256)
func (_Issuer *IssuerTransactorSession) RequestCertification(_data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertification(&_Issuer.TransactOpts, _data)
}

// RequestCertificationFor is a paid mutator transaction binding the contract method 0x20f2637d.
//
// Solidity: function requestCertificationFor(bytes _data, address _owner) returns(uint256)
func (_Issuer *IssuerTransactor) RequestCertificationFor(opts *bind.TransactOpts, _data []byte, _owner common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "requestCertificationFor", _data, _owner)
}

// RequestCertificationFor is a paid mutator transaction binding the contract method 0x20f2637d.
//
// Solidity: function requestCertificationFor(bytes _data, address _owner) returns(uint256)
func (_Issuer *IssuerSession) RequestCertificationFor(_data []byte, _owner common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertificationFor(&_Issuer.TransactOpts, _data, _owner)
}

// RequestCertificationFor is a paid mutator transaction binding the contract method 0x20f2637d.
//
// Solidity: function requestCertificationFor(bytes _data, address _owner) returns(uint256)
func (_Issuer *IssuerTransactorSession) RequestCertificationFor(_data []byte, _owner common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertificationFor(&_Issuer.TransactOpts, _data, _owner)
}

// RevokeCertificate is a paid mutator transaction binding the contract method 0x06f5497e.
//
// Solidity: function revokeCertificate(uint256 _certificateId) returns()
func (_Issuer *IssuerTransactor) RevokeCertificate(opts *bind.TransactOpts, _certificateId *big.Int) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "revokeCertificate", _certificateId)
}

// RevokeCertificate is a paid mutator transaction binding the contract method 0x06f5497e.
//
// Solidity: function revokeCertificate(uint256 _certificateId) returns()
func (_Issuer *IssuerSession) RevokeCertificate(_certificateId *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.RevokeCertificate(&_Issuer.TransactOpts, _certificateId)
}

// RevokeCertificate is a paid mutator transaction binding the contract method 0x06f5497e.
//
// Solidity: function revokeCertificate(uint256 _certificateId) returns()
func (_Issuer *IssuerTransactorSession) RevokeCertificate(_certificateId *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.RevokeCertificate(&_Issuer.TransactOpts, _certificateId)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0xe7d915cf.
//
// Solidity: function revokeRequest(uint256 _requestId) returns()
func (_Issuer *IssuerTransactor) RevokeRequest(opts *bind.TransactOpts, _requestId *big.Int) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "revokeRequest", _requestId)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0xe7d915cf.
//
// Solidity: function revokeRequest(uint256 _requestId) returns()
func (_Issuer *IssuerSession) RevokeRequest(_requestId *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.RevokeRequest(&_Issuer.TransactOpts, _requestId)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0xe7d915cf.
//
// Solidity: function revokeRequest(uint256 _requestId) returns()
func (_Issuer *IssuerTransactorSession) RevokeRequest(_requestId *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.RevokeRequest(&_Issuer.TransactOpts, _requestId)
}

// SetPrivateIssuer is a paid mutator transaction binding the contract method 0x3e42e9fa.
//
// Solidity: function setPrivateIssuer(address _privateIssuer) returns()
func (_Issuer *IssuerTransactor) SetPrivateIssuer(opts *bind.TransactOpts, _privateIssuer common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "setPrivateIssuer", _privateIssuer)
}

// SetPrivateIssuer is a paid mutator transaction binding the contract method 0x3e42e9fa.
//
// Solidity: function setPrivateIssuer(address _privateIssuer) returns()
func (_Issuer *IssuerSession) SetPrivateIssuer(_privateIssuer common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.SetPrivateIssuer(&_Issuer.TransactOpts, _privateIssuer)
}

// SetPrivateIssuer is a paid mutator transaction binding the contract method 0x3e42e9fa.
//
// Solidity: function setPrivateIssuer(address _privateIssuer) returns()
func (_Issuer *IssuerTransactorSession) SetPrivateIssuer(_privateIssuer common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.SetPrivateIssuer(&_Issuer.TransactOpts, _privateIssuer)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Issuer *IssuerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Issuer *IssuerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.TransferOwnership(&_Issuer.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Issuer *IssuerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.TransferOwnership(&_Issuer.TransactOpts, newOwner)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Issuer *IssuerTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Issuer *IssuerSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.UpgradeTo(&_Issuer.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Issuer *IssuerTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.UpgradeTo(&_Issuer.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Issuer *IssuerTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Issuer *IssuerSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.UpgradeToAndCall(&_Issuer.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Issuer *IssuerTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.UpgradeToAndCall(&_Issuer.TransactOpts, newImplementation, data)
}

// IssuerAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Issuer contract.
type IssuerAdminChangedIterator struct {
	Event *IssuerAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerAdminChanged represents a AdminChanged event raised by the Issuer contract.
type IssuerAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Issuer *IssuerFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*IssuerAdminChangedIterator, error) {

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &IssuerAdminChangedIterator{contract: _Issuer.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Issuer *IssuerFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *IssuerAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerAdminChanged)
				if err := _Issuer.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Issuer *IssuerFilterer) ParseAdminChanged(log types.Log) (*IssuerAdminChanged, error) {
	event := new(IssuerAdminChanged)
	if err := _Issuer.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Issuer contract.
type IssuerBeaconUpgradedIterator struct {
	Event *IssuerBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerBeaconUpgraded represents a BeaconUpgraded event raised by the Issuer contract.
type IssuerBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Issuer *IssuerFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*IssuerBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &IssuerBeaconUpgradedIterator{contract: _Issuer.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Issuer *IssuerFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *IssuerBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerBeaconUpgraded)
				if err := _Issuer.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Issuer *IssuerFilterer) ParseBeaconUpgraded(log types.Log) (*IssuerBeaconUpgraded, error) {
	event := new(IssuerBeaconUpgraded)
	if err := _Issuer.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificateRevokedIterator is returned from FilterCertificateRevoked and is used to iterate over the raw logs and unpacked data for CertificateRevoked events raised by the Issuer contract.
type IssuerCertificateRevokedIterator struct {
	Event *IssuerCertificateRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificateRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificateRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificateRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificateRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificateRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificateRevoked represents a CertificateRevoked event raised by the Issuer contract.
type IssuerCertificateRevoked struct {
	CertificateId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCertificateRevoked is a free log retrieval operation binding the contract event 0xefa6c5f47ac2523bb4db18032377bf7fdce0fa9d86eddcae1ca9bba38be615d7.
//
// Solidity: event CertificateRevoked(uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) FilterCertificateRevoked(opts *bind.FilterOpts, _certificateId []*big.Int) (*IssuerCertificateRevokedIterator, error) {

	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificateRevoked", _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificateRevokedIterator{contract: _Issuer.contract, event: "CertificateRevoked", logs: logs, sub: sub}, nil
}

// WatchCertificateRevoked is a free log subscription operation binding the contract event 0xefa6c5f47ac2523bb4db18032377bf7fdce0fa9d86eddcae1ca9bba38be615d7.
//
// Solidity: event CertificateRevoked(uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) WatchCertificateRevoked(opts *bind.WatchOpts, sink chan<- *IssuerCertificateRevoked, _certificateId []*big.Int) (event.Subscription, error) {

	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificateRevoked", _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificateRevoked)
				if err := _Issuer.contract.UnpackLog(event, "CertificateRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificateRevoked is a log parse operation binding the contract event 0xefa6c5f47ac2523bb4db18032377bf7fdce0fa9d86eddcae1ca9bba38be615d7.
//
// Solidity: event CertificateRevoked(uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) ParseCertificateRevoked(log types.Log) (*IssuerCertificateRevoked, error) {
	event := new(IssuerCertificateRevoked)
	if err := _Issuer.contract.UnpackLog(event, "CertificateRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificateVolumeMintedIterator is returned from FilterCertificateVolumeMinted and is used to iterate over the raw logs and unpacked data for CertificateVolumeMinted events raised by the Issuer contract.
type IssuerCertificateVolumeMintedIterator struct {
	Event *IssuerCertificateVolumeMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificateVolumeMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificateVolumeMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificateVolumeMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificateVolumeMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificateVolumeMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificateVolumeMinted represents a CertificateVolumeMinted event raised by the Issuer contract.
type IssuerCertificateVolumeMinted struct {
	Owner         common.Address
	CertificateId *big.Int
	Volume        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCertificateVolumeMinted is a free log retrieval operation binding the contract event 0x41c2dee25673dbafd1129227b55cc9d9ba5887f7e753c351ce274f4641daf7e2.
//
// Solidity: event CertificateVolumeMinted(address indexed _owner, uint256 indexed _certificateId, uint256 indexed _volume)
func (_Issuer *IssuerFilterer) FilterCertificateVolumeMinted(opts *bind.FilterOpts, _owner []common.Address, _certificateId []*big.Int, _volume []*big.Int) (*IssuerCertificateVolumeMintedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}
	var _volumeRule []interface{}
	for _, _volumeItem := range _volume {
		_volumeRule = append(_volumeRule, _volumeItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificateVolumeMinted", _ownerRule, _certificateIdRule, _volumeRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificateVolumeMintedIterator{contract: _Issuer.contract, event: "CertificateVolumeMinted", logs: logs, sub: sub}, nil
}

// WatchCertificateVolumeMinted is a free log subscription operation binding the contract event 0x41c2dee25673dbafd1129227b55cc9d9ba5887f7e753c351ce274f4641daf7e2.
//
// Solidity: event CertificateVolumeMinted(address indexed _owner, uint256 indexed _certificateId, uint256 indexed _volume)
func (_Issuer *IssuerFilterer) WatchCertificateVolumeMinted(opts *bind.WatchOpts, sink chan<- *IssuerCertificateVolumeMinted, _owner []common.Address, _certificateId []*big.Int, _volume []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}
	var _volumeRule []interface{}
	for _, _volumeItem := range _volume {
		_volumeRule = append(_volumeRule, _volumeItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificateVolumeMinted", _ownerRule, _certificateIdRule, _volumeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificateVolumeMinted)
				if err := _Issuer.contract.UnpackLog(event, "CertificateVolumeMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificateVolumeMinted is a log parse operation binding the contract event 0x41c2dee25673dbafd1129227b55cc9d9ba5887f7e753c351ce274f4641daf7e2.
//
// Solidity: event CertificateVolumeMinted(address indexed _owner, uint256 indexed _certificateId, uint256 indexed _volume)
func (_Issuer *IssuerFilterer) ParseCertificateVolumeMinted(log types.Log) (*IssuerCertificateVolumeMinted, error) {
	event := new(IssuerCertificateVolumeMinted)
	if err := _Issuer.contract.UnpackLog(event, "CertificateVolumeMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificationRequestApprovedIterator is returned from FilterCertificationRequestApproved and is used to iterate over the raw logs and unpacked data for CertificationRequestApproved events raised by the Issuer contract.
type IssuerCertificationRequestApprovedIterator struct {
	Event *IssuerCertificationRequestApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificationRequestApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificationRequestApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificationRequestApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificationRequestApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificationRequestApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificationRequestApproved represents a CertificationRequestApproved event raised by the Issuer contract.
type IssuerCertificationRequestApproved struct {
	Owner         common.Address
	Id            *big.Int
	CertificateId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCertificationRequestApproved is a free log retrieval operation binding the contract event 0x3e5ec6d038fea8aae03ddd86c2882c546a05ea282e753cf085c8213a61a79130.
//
// Solidity: event CertificationRequestApproved(address indexed _owner, uint256 indexed _id, uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) FilterCertificationRequestApproved(opts *bind.FilterOpts, _owner []common.Address, _id []*big.Int, _certificateId []*big.Int) (*IssuerCertificationRequestApprovedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificationRequestApproved", _ownerRule, _idRule, _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificationRequestApprovedIterator{contract: _Issuer.contract, event: "CertificationRequestApproved", logs: logs, sub: sub}, nil
}

// WatchCertificationRequestApproved is a free log subscription operation binding the contract event 0x3e5ec6d038fea8aae03ddd86c2882c546a05ea282e753cf085c8213a61a79130.
//
// Solidity: event CertificationRequestApproved(address indexed _owner, uint256 indexed _id, uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) WatchCertificationRequestApproved(opts *bind.WatchOpts, sink chan<- *IssuerCertificationRequestApproved, _owner []common.Address, _id []*big.Int, _certificateId []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificationRequestApproved", _ownerRule, _idRule, _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificationRequestApproved)
				if err := _Issuer.contract.UnpackLog(event, "CertificationRequestApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificationRequestApproved is a log parse operation binding the contract event 0x3e5ec6d038fea8aae03ddd86c2882c546a05ea282e753cf085c8213a61a79130.
//
// Solidity: event CertificationRequestApproved(address indexed _owner, uint256 indexed _id, uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) ParseCertificationRequestApproved(log types.Log) (*IssuerCertificationRequestApproved, error) {
	event := new(IssuerCertificationRequestApproved)
	if err := _Issuer.contract.UnpackLog(event, "CertificationRequestApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificationRequestRevokedIterator is returned from FilterCertificationRequestRevoked and is used to iterate over the raw logs and unpacked data for CertificationRequestRevoked events raised by the Issuer contract.
type IssuerCertificationRequestRevokedIterator struct {
	Event *IssuerCertificationRequestRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificationRequestRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificationRequestRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificationRequestRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificationRequestRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificationRequestRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificationRequestRevoked represents a CertificationRequestRevoked event raised by the Issuer contract.
type IssuerCertificationRequestRevoked struct {
	Owner common.Address
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCertificationRequestRevoked is a free log retrieval operation binding the contract event 0x2b117599f21d800ddd10552521c610b44ab51d64ac07ae5cb3ee28bbb19946e5.
//
// Solidity: event CertificationRequestRevoked(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) FilterCertificationRequestRevoked(opts *bind.FilterOpts, _owner []common.Address, _id []*big.Int) (*IssuerCertificationRequestRevokedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificationRequestRevoked", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificationRequestRevokedIterator{contract: _Issuer.contract, event: "CertificationRequestRevoked", logs: logs, sub: sub}, nil
}

// WatchCertificationRequestRevoked is a free log subscription operation binding the contract event 0x2b117599f21d800ddd10552521c610b44ab51d64ac07ae5cb3ee28bbb19946e5.
//
// Solidity: event CertificationRequestRevoked(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) WatchCertificationRequestRevoked(opts *bind.WatchOpts, sink chan<- *IssuerCertificationRequestRevoked, _owner []common.Address, _id []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificationRequestRevoked", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificationRequestRevoked)
				if err := _Issuer.contract.UnpackLog(event, "CertificationRequestRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificationRequestRevoked is a log parse operation binding the contract event 0x2b117599f21d800ddd10552521c610b44ab51d64ac07ae5cb3ee28bbb19946e5.
//
// Solidity: event CertificationRequestRevoked(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) ParseCertificationRequestRevoked(log types.Log) (*IssuerCertificationRequestRevoked, error) {
	event := new(IssuerCertificationRequestRevoked)
	if err := _Issuer.contract.UnpackLog(event, "CertificationRequestRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificationRequestedIterator is returned from FilterCertificationRequested and is used to iterate over the raw logs and unpacked data for CertificationRequested events raised by the Issuer contract.
type IssuerCertificationRequestedIterator struct {
	Event *IssuerCertificationRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificationRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificationRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificationRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificationRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificationRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificationRequested represents a CertificationRequested event raised by the Issuer contract.
type IssuerCertificationRequested struct {
	Owner common.Address
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCertificationRequested is a free log retrieval operation binding the contract event 0xfda3ec1cbd67cbf30346ae8c497a82d68bbfa00bd5d43b96761c03858a08367b.
//
// Solidity: event CertificationRequested(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) FilterCertificationRequested(opts *bind.FilterOpts, _owner []common.Address, _id []*big.Int) (*IssuerCertificationRequestedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificationRequested", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificationRequestedIterator{contract: _Issuer.contract, event: "CertificationRequested", logs: logs, sub: sub}, nil
}

// WatchCertificationRequested is a free log subscription operation binding the contract event 0xfda3ec1cbd67cbf30346ae8c497a82d68bbfa00bd5d43b96761c03858a08367b.
//
// Solidity: event CertificationRequested(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) WatchCertificationRequested(opts *bind.WatchOpts, sink chan<- *IssuerCertificationRequested, _owner []common.Address, _id []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificationRequested", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificationRequested)
				if err := _Issuer.contract.UnpackLog(event, "CertificationRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificationRequested is a log parse operation binding the contract event 0xfda3ec1cbd67cbf30346ae8c497a82d68bbfa00bd5d43b96761c03858a08367b.
//
// Solidity: event CertificationRequested(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) ParseCertificationRequested(log types.Log) (*IssuerCertificationRequested, error) {
	event := new(IssuerCertificationRequested)
	if err := _Issuer.contract.UnpackLog(event, "CertificationRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Issuer contract.
type IssuerOwnershipTransferredIterator struct {
	Event *IssuerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerOwnershipTransferred represents a OwnershipTransferred event raised by the Issuer contract.
type IssuerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Issuer *IssuerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*IssuerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &IssuerOwnershipTransferredIterator{contract: _Issuer.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Issuer *IssuerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *IssuerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerOwnershipTransferred)
				if err := _Issuer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Issuer *IssuerFilterer) ParseOwnershipTransferred(log types.Log) (*IssuerOwnershipTransferred, error) {
	event := new(IssuerOwnershipTransferred)
	if err := _Issuer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Issuer contract.
type IssuerUpgradedIterator struct {
	Event *IssuerUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerUpgraded represents a Upgraded event raised by the Issuer contract.
type IssuerUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Issuer *IssuerFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*IssuerUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &IssuerUpgradedIterator{contract: _Issuer.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Issuer *IssuerFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *IssuerUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerUpgraded)
				if err := _Issuer.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Issuer *IssuerFilterer) ParseUpgraded(log types.Log) (*IssuerUpgraded, error) {
	event := new(IssuerUpgraded)
	if err := _Issuer.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
